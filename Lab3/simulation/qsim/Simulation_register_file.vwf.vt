// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/04/2024 18:24:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    REGISTER_FILE
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module REGISTER_FILE_vlg_sample_tst(
	clock,
	Read_Register_1,
	Read_Register_2,
	Reg_Write,
	reset_bar,
	Write_Data,
	Write_Register,
	sampler_tx
);
input  clock;
input [4:0] Read_Register_1;
input [4:0] Read_Register_2;
input  Reg_Write;
input  reset_bar;
input [7:0] Write_Data;
input [4:0] Write_Register;
output sampler_tx;

reg sample;
time current_time;
always @(clock or Read_Register_1 or Read_Register_2 or Reg_Write or reset_bar or Write_Data or Write_Register)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module REGISTER_FILE_vlg_check_tst (
	Data_1,
	Data_2,
	sampler_rx
);
input [7:0] Data_1;
input [7:0] Data_2;
input sampler_rx;

reg [7:0] Data_1_expected;
reg [7:0] Data_2_expected;

reg [7:0] Data_1_prev;
reg [7:0] Data_2_prev;

reg [7:0] Data_1_expected_prev;
reg [7:0] Data_2_expected_prev;

reg [7:0] last_Data_1_exp;
reg [7:0] last_Data_2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Data_1_prev = Data_1;
	Data_2_prev = Data_2;
end

// update expected /o prevs

always @(trigger)
begin
	Data_1_expected_prev = Data_1_expected;
	Data_2_expected_prev = Data_2_expected;
end


// expected Data_1[ 7 ]
initial
begin
	Data_1_expected[7] = 1'bX;
end 
// expected Data_1[ 6 ]
initial
begin
	Data_1_expected[6] = 1'bX;
end 
// expected Data_1[ 5 ]
initial
begin
	Data_1_expected[5] = 1'bX;
end 
// expected Data_1[ 4 ]
initial
begin
	Data_1_expected[4] = 1'bX;
end 
// expected Data_1[ 3 ]
initial
begin
	Data_1_expected[3] = 1'bX;
end 
// expected Data_1[ 2 ]
initial
begin
	Data_1_expected[2] = 1'bX;
end 
// expected Data_1[ 1 ]
initial
begin
	Data_1_expected[1] = 1'bX;
end 
// expected Data_1[ 0 ]
initial
begin
	Data_1_expected[0] = 1'bX;
end 
// expected Data_2[ 7 ]
initial
begin
	Data_2_expected[7] = 1'bX;
end 
// expected Data_2[ 6 ]
initial
begin
	Data_2_expected[6] = 1'bX;
end 
// expected Data_2[ 5 ]
initial
begin
	Data_2_expected[5] = 1'bX;
end 
// expected Data_2[ 4 ]
initial
begin
	Data_2_expected[4] = 1'bX;
end 
// expected Data_2[ 3 ]
initial
begin
	Data_2_expected[3] = 1'bX;
end 
// expected Data_2[ 2 ]
initial
begin
	Data_2_expected[2] = 1'bX;
end 
// expected Data_2[ 1 ]
initial
begin
	Data_2_expected[1] = 1'bX;
end 
// expected Data_2[ 0 ]
initial
begin
	Data_2_expected[0] = 1'bX;
end 
// generate trigger
always @(Data_1_expected or Data_1 or Data_2_expected or Data_2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Data_1 = %b | expected Data_2 = %b | ",Data_1_expected_prev,Data_2_expected_prev);
	$display("| real Data_1 = %b | real Data_2 = %b | ",Data_1_prev,Data_2_prev);
`endif
	if (
		( Data_1_expected_prev[0] !== 1'bx ) && ( Data_1_prev[0] !== Data_1_expected_prev[0] )
		&& ((Data_1_expected_prev[0] !== last_Data_1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_1_expected_prev);
		$display ("     Real value = %b", Data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Data_1_exp[0] = Data_1_expected_prev[0];
	end
	if (
		( Data_1_expected_prev[1] !== 1'bx ) && ( Data_1_prev[1] !== Data_1_expected_prev[1] )
		&& ((Data_1_expected_prev[1] !== last_Data_1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_1_expected_prev);
		$display ("     Real value = %b", Data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Data_1_exp[1] = Data_1_expected_prev[1];
	end
	if (
		( Data_1_expected_prev[2] !== 1'bx ) && ( Data_1_prev[2] !== Data_1_expected_prev[2] )
		&& ((Data_1_expected_prev[2] !== last_Data_1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_1_expected_prev);
		$display ("     Real value = %b", Data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Data_1_exp[2] = Data_1_expected_prev[2];
	end
	if (
		( Data_1_expected_prev[3] !== 1'bx ) && ( Data_1_prev[3] !== Data_1_expected_prev[3] )
		&& ((Data_1_expected_prev[3] !== last_Data_1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_1_expected_prev);
		$display ("     Real value = %b", Data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Data_1_exp[3] = Data_1_expected_prev[3];
	end
	if (
		( Data_1_expected_prev[4] !== 1'bx ) && ( Data_1_prev[4] !== Data_1_expected_prev[4] )
		&& ((Data_1_expected_prev[4] !== last_Data_1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_1_expected_prev);
		$display ("     Real value = %b", Data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Data_1_exp[4] = Data_1_expected_prev[4];
	end
	if (
		( Data_1_expected_prev[5] !== 1'bx ) && ( Data_1_prev[5] !== Data_1_expected_prev[5] )
		&& ((Data_1_expected_prev[5] !== last_Data_1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_1_expected_prev);
		$display ("     Real value = %b", Data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Data_1_exp[5] = Data_1_expected_prev[5];
	end
	if (
		( Data_1_expected_prev[6] !== 1'bx ) && ( Data_1_prev[6] !== Data_1_expected_prev[6] )
		&& ((Data_1_expected_prev[6] !== last_Data_1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_1_expected_prev);
		$display ("     Real value = %b", Data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Data_1_exp[6] = Data_1_expected_prev[6];
	end
	if (
		( Data_1_expected_prev[7] !== 1'bx ) && ( Data_1_prev[7] !== Data_1_expected_prev[7] )
		&& ((Data_1_expected_prev[7] !== last_Data_1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_1_expected_prev);
		$display ("     Real value = %b", Data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Data_1_exp[7] = Data_1_expected_prev[7];
	end
	if (
		( Data_2_expected_prev[0] !== 1'bx ) && ( Data_2_prev[0] !== Data_2_expected_prev[0] )
		&& ((Data_2_expected_prev[0] !== last_Data_2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_2_expected_prev);
		$display ("     Real value = %b", Data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_2_exp[0] = Data_2_expected_prev[0];
	end
	if (
		( Data_2_expected_prev[1] !== 1'bx ) && ( Data_2_prev[1] !== Data_2_expected_prev[1] )
		&& ((Data_2_expected_prev[1] !== last_Data_2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_2_expected_prev);
		$display ("     Real value = %b", Data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_2_exp[1] = Data_2_expected_prev[1];
	end
	if (
		( Data_2_expected_prev[2] !== 1'bx ) && ( Data_2_prev[2] !== Data_2_expected_prev[2] )
		&& ((Data_2_expected_prev[2] !== last_Data_2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_2_expected_prev);
		$display ("     Real value = %b", Data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_2_exp[2] = Data_2_expected_prev[2];
	end
	if (
		( Data_2_expected_prev[3] !== 1'bx ) && ( Data_2_prev[3] !== Data_2_expected_prev[3] )
		&& ((Data_2_expected_prev[3] !== last_Data_2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_2_expected_prev);
		$display ("     Real value = %b", Data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_2_exp[3] = Data_2_expected_prev[3];
	end
	if (
		( Data_2_expected_prev[4] !== 1'bx ) && ( Data_2_prev[4] !== Data_2_expected_prev[4] )
		&& ((Data_2_expected_prev[4] !== last_Data_2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_2_expected_prev);
		$display ("     Real value = %b", Data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_2_exp[4] = Data_2_expected_prev[4];
	end
	if (
		( Data_2_expected_prev[5] !== 1'bx ) && ( Data_2_prev[5] !== Data_2_expected_prev[5] )
		&& ((Data_2_expected_prev[5] !== last_Data_2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_2_expected_prev);
		$display ("     Real value = %b", Data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_2_exp[5] = Data_2_expected_prev[5];
	end
	if (
		( Data_2_expected_prev[6] !== 1'bx ) && ( Data_2_prev[6] !== Data_2_expected_prev[6] )
		&& ((Data_2_expected_prev[6] !== last_Data_2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_2_expected_prev);
		$display ("     Real value = %b", Data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_2_exp[6] = Data_2_expected_prev[6];
	end
	if (
		( Data_2_expected_prev[7] !== 1'bx ) && ( Data_2_prev[7] !== Data_2_expected_prev[7] )
		&& ((Data_2_expected_prev[7] !== last_Data_2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_2_expected_prev);
		$display ("     Real value = %b", Data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_2_exp[7] = Data_2_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module REGISTER_FILE_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [4:0] Read_Register_1;
reg [4:0] Read_Register_2;
reg Reg_Write;
reg reset_bar;
reg [7:0] Write_Data;
reg [4:0] Write_Register;
// wires                                               
wire [7:0] Data_1;
wire [7:0] Data_2;

wire sampler;                             

// assign statements (if any)                          
REGISTER_FILE i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.Data_1(Data_1),
	.Data_2(Data_2),
	.Read_Register_1(Read_Register_1),
	.Read_Register_2(Read_Register_2),
	.Reg_Write(Reg_Write),
	.reset_bar(reset_bar),
	.Write_Data(Write_Data),
	.Write_Register(Write_Register)
);

// clock
always
begin
	clock = 1'b0;
	clock = #25000 1'b1;
	#25000;
end 

// reset_bar
initial
begin
	reset_bar = 1'b0;
	reset_bar = #70000 1'b1;
end 
// Read_Register_1[ 4 ]
initial
begin
	Read_Register_1[4] = 1'b0;
end 
// Read_Register_1[ 3 ]
initial
begin
	Read_Register_1[3] = 1'b0;
end 
// Read_Register_1[ 2 ]
initial
begin
	Read_Register_1[2] = 1'b0;
end 
// Read_Register_1[ 1 ]
initial
begin
	Read_Register_1[1] = 1'b1;
end 
// Read_Register_1[ 0 ]
initial
begin
	Read_Register_1[0] = 1'b0;
end 
// Read_Register_2[ 4 ]
initial
begin
	Read_Register_2[4] = 1'b0;
end 
// Read_Register_2[ 3 ]
initial
begin
	Read_Register_2[3] = 1'b0;
end 
// Read_Register_2[ 2 ]
initial
begin
	Read_Register_2[2] = 1'b0;
end 
// Read_Register_2[ 1 ]
initial
begin
	Read_Register_2[1] = 1'b1;
end 
// Read_Register_2[ 0 ]
initial
begin
	Read_Register_2[0] = 1'b1;
end 

// Reg_Write
initial
begin
	Reg_Write = 1'b0;
	Reg_Write = #120000 1'b1;
	Reg_Write = #50000 1'b0;
	Reg_Write = #60000 1'b1;
	Reg_Write = #80000 1'b0;
end 
// Write_Register[ 4 ]
initial
begin
	Write_Register[4] = 1'b0;
end 
// Write_Register[ 3 ]
initial
begin
	Write_Register[3] = 1'b0;
end 
// Write_Register[ 2 ]
initial
begin
	Write_Register[2] = 1'b0;
end 
// Write_Register[ 1 ]
initial
begin
	Write_Register[1] = 1'b1;
	Write_Register[1] = #340000 1'b0;
end 
// Write_Register[ 0 ]
initial
begin
	Write_Register[0] = 1'b0;
	Write_Register[0] = #220000 1'b1;
	Write_Register[0] = #120000 1'b0;
end 
// Write_Data[ 7 ]
initial
begin
	Write_Data[7] = 1'b0;
	Write_Data[7] = #220000 1'b1;
	Write_Data[7] = #120000 1'b0;
end 
// Write_Data[ 6 ]
initial
begin
	Write_Data[6] = 1'b1;
end 
// Write_Data[ 5 ]
initial
begin
	Write_Data[5] = 1'b1;
end 
// Write_Data[ 4 ]
initial
begin
	Write_Data[4] = 1'b1;
end 
// Write_Data[ 3 ]
initial
begin
	Write_Data[3] = 1'b1;
end 
// Write_Data[ 2 ]
initial
begin
	Write_Data[2] = 1'b1;
end 
// Write_Data[ 1 ]
initial
begin
	Write_Data[1] = 1'b0;
	Write_Data[1] = #220000 1'b1;
	Write_Data[1] = #120000 1'b0;
end 
// Write_Data[ 0 ]
initial
begin
	Write_Data[0] = 1'b0;
	Write_Data[0] = #220000 1'b1;
	Write_Data[0] = #120000 1'b0;
end 

REGISTER_FILE_vlg_sample_tst tb_sample (
	.clock(clock),
	.Read_Register_1(Read_Register_1),
	.Read_Register_2(Read_Register_2),
	.Reg_Write(Reg_Write),
	.reset_bar(reset_bar),
	.Write_Data(Write_Data),
	.Write_Register(Write_Register),
	.sampler_tx(sampler)
);

REGISTER_FILE_vlg_check_tst tb_out(
	.Data_1(Data_1),
	.Data_2(Data_2),
	.sampler_rx(sampler)
);
endmodule

