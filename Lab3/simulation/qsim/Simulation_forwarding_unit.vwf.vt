// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/01/2024 12:15:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FORWARDING_UNIT
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FORWARDING_UNIT_vlg_sample_tst(
	Rd_EX_MEM,
	Rd_MEM_WB,
	REG_WRITE_EX_MEM,
	REG_WRITE_MEM_WB,
	Rs_ID_EX,
	Rt_ID_EX,
	sampler_tx
);
input [4:0] Rd_EX_MEM;
input [4:0] Rd_MEM_WB;
input  REG_WRITE_EX_MEM;
input  REG_WRITE_MEM_WB;
input [4:0] Rs_ID_EX;
input [4:0] Rt_ID_EX;
output sampler_tx;

reg sample;
time current_time;
always @(Rd_EX_MEM or Rd_MEM_WB or REG_WRITE_EX_MEM or REG_WRITE_MEM_WB or Rs_ID_EX or Rt_ID_EX)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FORWARDING_UNIT_vlg_check_tst (
	FORWARD_A,
	FORWARD_B,
	sampler_rx
);
input [1:0] FORWARD_A;
input [1:0] FORWARD_B;
input sampler_rx;

reg [1:0] FORWARD_A_expected;
reg [1:0] FORWARD_B_expected;

reg [1:0] FORWARD_A_prev;
reg [1:0] FORWARD_B_prev;

reg [1:0] FORWARD_A_expected_prev;
reg [1:0] FORWARD_B_expected_prev;

reg [1:0] last_FORWARD_A_exp;
reg [1:0] last_FORWARD_B_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	FORWARD_A_prev = FORWARD_A;
	FORWARD_B_prev = FORWARD_B;
end

// update expected /o prevs

always @(trigger)
begin
	FORWARD_A_expected_prev = FORWARD_A_expected;
	FORWARD_B_expected_prev = FORWARD_B_expected;
end


// expected FORWARD_A[ 1 ]
initial
begin
	FORWARD_A_expected[1] = 1'bX;
end 
// expected FORWARD_A[ 0 ]
initial
begin
	FORWARD_A_expected[0] = 1'bX;
end 
// expected FORWARD_B[ 1 ]
initial
begin
	FORWARD_B_expected[1] = 1'bX;
end 
// expected FORWARD_B[ 0 ]
initial
begin
	FORWARD_B_expected[0] = 1'bX;
end 
// generate trigger
always @(FORWARD_A_expected or FORWARD_A or FORWARD_B_expected or FORWARD_B)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected FORWARD_A = %b | expected FORWARD_B = %b | ",FORWARD_A_expected_prev,FORWARD_B_expected_prev);
	$display("| real FORWARD_A = %b | real FORWARD_B = %b | ",FORWARD_A_prev,FORWARD_B_prev);
`endif
	if (
		( FORWARD_A_expected_prev[0] !== 1'bx ) && ( FORWARD_A_prev[0] !== FORWARD_A_expected_prev[0] )
		&& ((FORWARD_A_expected_prev[0] !== last_FORWARD_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FORWARD_A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FORWARD_A_expected_prev);
		$display ("     Real value = %b", FORWARD_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_FORWARD_A_exp[0] = FORWARD_A_expected_prev[0];
	end
	if (
		( FORWARD_A_expected_prev[1] !== 1'bx ) && ( FORWARD_A_prev[1] !== FORWARD_A_expected_prev[1] )
		&& ((FORWARD_A_expected_prev[1] !== last_FORWARD_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FORWARD_A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FORWARD_A_expected_prev);
		$display ("     Real value = %b", FORWARD_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_FORWARD_A_exp[1] = FORWARD_A_expected_prev[1];
	end
	if (
		( FORWARD_B_expected_prev[0] !== 1'bx ) && ( FORWARD_B_prev[0] !== FORWARD_B_expected_prev[0] )
		&& ((FORWARD_B_expected_prev[0] !== last_FORWARD_B_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FORWARD_B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FORWARD_B_expected_prev);
		$display ("     Real value = %b", FORWARD_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_FORWARD_B_exp[0] = FORWARD_B_expected_prev[0];
	end
	if (
		( FORWARD_B_expected_prev[1] !== 1'bx ) && ( FORWARD_B_prev[1] !== FORWARD_B_expected_prev[1] )
		&& ((FORWARD_B_expected_prev[1] !== last_FORWARD_B_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FORWARD_B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FORWARD_B_expected_prev);
		$display ("     Real value = %b", FORWARD_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_FORWARD_B_exp[1] = FORWARD_B_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FORWARDING_UNIT_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] Rd_EX_MEM;
reg [4:0] Rd_MEM_WB;
reg REG_WRITE_EX_MEM;
reg REG_WRITE_MEM_WB;
reg [4:0] Rs_ID_EX;
reg [4:0] Rt_ID_EX;
// wires                                               
wire [1:0] FORWARD_A;
wire [1:0] FORWARD_B;

wire sampler;                             

// assign statements (if any)                          
FORWARDING_UNIT i1 (
// port map - connection between master ports and signals/registers   
	.FORWARD_A(FORWARD_A),
	.FORWARD_B(FORWARD_B),
	.Rd_EX_MEM(Rd_EX_MEM),
	.Rd_MEM_WB(Rd_MEM_WB),
	.REG_WRITE_EX_MEM(REG_WRITE_EX_MEM),
	.REG_WRITE_MEM_WB(REG_WRITE_MEM_WB),
	.Rs_ID_EX(Rs_ID_EX),
	.Rt_ID_EX(Rt_ID_EX)
);
// Rs_ID_EX[ 4 ]
initial
begin
	Rs_ID_EX[4] = 1'b0;
end 
// Rs_ID_EX[ 3 ]
initial
begin
	Rs_ID_EX[3] = 1'b1;
end 
// Rs_ID_EX[ 2 ]
initial
begin
	Rs_ID_EX[2] = 1'b0;
end 
// Rs_ID_EX[ 1 ]
initial
begin
	Rs_ID_EX[1] = 1'b0;
end 
// Rs_ID_EX[ 0 ]
initial
begin
	Rs_ID_EX[0] = 1'b0;
end 
// Rt_ID_EX[ 4 ]
initial
begin
	Rt_ID_EX[4] = 1'b1;
end 
// Rt_ID_EX[ 3 ]
initial
begin
	Rt_ID_EX[3] = 1'b1;
end 
// Rt_ID_EX[ 2 ]
initial
begin
	Rt_ID_EX[2] = 1'b1;
end 
// Rt_ID_EX[ 1 ]
initial
begin
	Rt_ID_EX[1] = 1'b0;
end 
// Rt_ID_EX[ 0 ]
initial
begin
	Rt_ID_EX[0] = 1'b1;
end 
// Rd_EX_MEM[ 4 ]
initial
begin
	Rd_EX_MEM[4] = 1'b1;
end 
// Rd_EX_MEM[ 3 ]
initial
begin
	Rd_EX_MEM[3] = 1'b1;
end 
// Rd_EX_MEM[ 2 ]
initial
begin
	Rd_EX_MEM[2] = 1'b1;
end 
// Rd_EX_MEM[ 1 ]
initial
begin
	Rd_EX_MEM[1] = 1'b1;
end 
// Rd_EX_MEM[ 0 ]
initial
begin
	Rd_EX_MEM[0] = 1'b1;
end 

// REG_WRITE_EX_MEM
initial
begin
	REG_WRITE_EX_MEM = 1'b0;
end 
// Rd_MEM_WB[ 4 ]
initial
begin
	Rd_MEM_WB[4] = 1'b1;
end 
// Rd_MEM_WB[ 3 ]
initial
begin
	Rd_MEM_WB[3] = 1'b1;
end 
// Rd_MEM_WB[ 2 ]
initial
begin
	Rd_MEM_WB[2] = 1'b1;
end 
// Rd_MEM_WB[ 1 ]
initial
begin
	Rd_MEM_WB[1] = 1'b0;
end 
// Rd_MEM_WB[ 0 ]
initial
begin
	Rd_MEM_WB[0] = 1'b1;
end 

// REG_WRITE_MEM_WB
initial
begin
	REG_WRITE_MEM_WB = 1'b1;
end 

FORWARDING_UNIT_vlg_sample_tst tb_sample (
	.Rd_EX_MEM(Rd_EX_MEM),
	.Rd_MEM_WB(Rd_MEM_WB),
	.REG_WRITE_EX_MEM(REG_WRITE_EX_MEM),
	.REG_WRITE_MEM_WB(REG_WRITE_MEM_WB),
	.Rs_ID_EX(Rs_ID_EX),
	.Rt_ID_EX(Rt_ID_EX),
	.sampler_tx(sampler)
);

FORWARDING_UNIT_vlg_check_tst tb_out(
	.FORWARD_A(FORWARD_A),
	.FORWARD_B(FORWARD_B),
	.sampler_rx(sampler)
);
endmodule

