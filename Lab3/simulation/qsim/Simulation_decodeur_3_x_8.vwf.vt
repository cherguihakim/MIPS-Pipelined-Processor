// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/04/2024 17:15:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DECODEUR_3_x_8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DECODEUR_3_x_8_vlg_sample_tst(
	entree,
	sampler_tx
);
input [2:0] entree;
output sampler_tx;

reg sample;
time current_time;
always @(entree)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DECODEUR_3_x_8_vlg_check_tst (
	sortie_0,
	sortie_1,
	sortie_2,
	sortie_3,
	sortie_4,
	sortie_5,
	sortie_6,
	sortie_7,
	sampler_rx
);
input  sortie_0;
input  sortie_1;
input  sortie_2;
input  sortie_3;
input  sortie_4;
input  sortie_5;
input  sortie_6;
input  sortie_7;
input sampler_rx;

reg  sortie_0_expected;
reg  sortie_1_expected;
reg  sortie_2_expected;
reg  sortie_3_expected;
reg  sortie_4_expected;
reg  sortie_5_expected;
reg  sortie_6_expected;
reg  sortie_7_expected;

reg  sortie_0_prev;
reg  sortie_1_prev;
reg  sortie_2_prev;
reg  sortie_3_prev;
reg  sortie_4_prev;
reg  sortie_5_prev;
reg  sortie_6_prev;
reg  sortie_7_prev;

reg  sortie_0_expected_prev;
reg  sortie_1_expected_prev;
reg  sortie_2_expected_prev;
reg  sortie_3_expected_prev;
reg  sortie_4_expected_prev;
reg  sortie_5_expected_prev;
reg  sortie_6_expected_prev;
reg  sortie_7_expected_prev;

reg  last_sortie_0_exp;
reg  last_sortie_1_exp;
reg  last_sortie_2_exp;
reg  last_sortie_3_exp;
reg  last_sortie_4_exp;
reg  last_sortie_5_exp;
reg  last_sortie_6_exp;
reg  last_sortie_7_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	sortie_0_prev = sortie_0;
	sortie_1_prev = sortie_1;
	sortie_2_prev = sortie_2;
	sortie_3_prev = sortie_3;
	sortie_4_prev = sortie_4;
	sortie_5_prev = sortie_5;
	sortie_6_prev = sortie_6;
	sortie_7_prev = sortie_7;
end

// update expected /o prevs

always @(trigger)
begin
	sortie_0_expected_prev = sortie_0_expected;
	sortie_1_expected_prev = sortie_1_expected;
	sortie_2_expected_prev = sortie_2_expected;
	sortie_3_expected_prev = sortie_3_expected;
	sortie_4_expected_prev = sortie_4_expected;
	sortie_5_expected_prev = sortie_5_expected;
	sortie_6_expected_prev = sortie_6_expected;
	sortie_7_expected_prev = sortie_7_expected;
end



// expected sortie_0
initial
begin
	sortie_0_expected = 1'bX;
end 

// expected sortie_1
initial
begin
	sortie_1_expected = 1'bX;
end 

// expected sortie_2
initial
begin
	sortie_2_expected = 1'bX;
end 

// expected sortie_3
initial
begin
	sortie_3_expected = 1'bX;
end 

// expected sortie_4
initial
begin
	sortie_4_expected = 1'bX;
end 

// expected sortie_5
initial
begin
	sortie_5_expected = 1'bX;
end 

// expected sortie_6
initial
begin
	sortie_6_expected = 1'bX;
end 

// expected sortie_7
initial
begin
	sortie_7_expected = 1'bX;
end 
// generate trigger
always @(sortie_0_expected or sortie_0 or sortie_1_expected or sortie_1 or sortie_2_expected or sortie_2 or sortie_3_expected or sortie_3 or sortie_4_expected or sortie_4 or sortie_5_expected or sortie_5 or sortie_6_expected or sortie_6 or sortie_7_expected or sortie_7)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected sortie_0 = %b | expected sortie_1 = %b | expected sortie_2 = %b | expected sortie_3 = %b | expected sortie_4 = %b | expected sortie_5 = %b | expected sortie_6 = %b | expected sortie_7 = %b | ",sortie_0_expected_prev,sortie_1_expected_prev,sortie_2_expected_prev,sortie_3_expected_prev,sortie_4_expected_prev,sortie_5_expected_prev,sortie_6_expected_prev,sortie_7_expected_prev);
	$display("| real sortie_0 = %b | real sortie_1 = %b | real sortie_2 = %b | real sortie_3 = %b | real sortie_4 = %b | real sortie_5 = %b | real sortie_6 = %b | real sortie_7 = %b | ",sortie_0_prev,sortie_1_prev,sortie_2_prev,sortie_3_prev,sortie_4_prev,sortie_5_prev,sortie_6_prev,sortie_7_prev);
`endif
	if (
		( sortie_0_expected_prev !== 1'bx ) && ( sortie_0_prev !== sortie_0_expected_prev )
		&& ((sortie_0_expected_prev !== last_sortie_0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_0_expected_prev);
		$display ("     Real value = %b", sortie_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sortie_0_exp = sortie_0_expected_prev;
	end
	if (
		( sortie_1_expected_prev !== 1'bx ) && ( sortie_1_prev !== sortie_1_expected_prev )
		&& ((sortie_1_expected_prev !== last_sortie_1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_1_expected_prev);
		$display ("     Real value = %b", sortie_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sortie_1_exp = sortie_1_expected_prev;
	end
	if (
		( sortie_2_expected_prev !== 1'bx ) && ( sortie_2_prev !== sortie_2_expected_prev )
		&& ((sortie_2_expected_prev !== last_sortie_2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_2_expected_prev);
		$display ("     Real value = %b", sortie_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sortie_2_exp = sortie_2_expected_prev;
	end
	if (
		( sortie_3_expected_prev !== 1'bx ) && ( sortie_3_prev !== sortie_3_expected_prev )
		&& ((sortie_3_expected_prev !== last_sortie_3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_3_expected_prev);
		$display ("     Real value = %b", sortie_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sortie_3_exp = sortie_3_expected_prev;
	end
	if (
		( sortie_4_expected_prev !== 1'bx ) && ( sortie_4_prev !== sortie_4_expected_prev )
		&& ((sortie_4_expected_prev !== last_sortie_4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_4_expected_prev);
		$display ("     Real value = %b", sortie_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sortie_4_exp = sortie_4_expected_prev;
	end
	if (
		( sortie_5_expected_prev !== 1'bx ) && ( sortie_5_prev !== sortie_5_expected_prev )
		&& ((sortie_5_expected_prev !== last_sortie_5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_5_expected_prev);
		$display ("     Real value = %b", sortie_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sortie_5_exp = sortie_5_expected_prev;
	end
	if (
		( sortie_6_expected_prev !== 1'bx ) && ( sortie_6_prev !== sortie_6_expected_prev )
		&& ((sortie_6_expected_prev !== last_sortie_6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_6_expected_prev);
		$display ("     Real value = %b", sortie_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_6_exp = sortie_6_expected_prev;
	end
	if (
		( sortie_7_expected_prev !== 1'bx ) && ( sortie_7_prev !== sortie_7_expected_prev )
		&& ((sortie_7_expected_prev !== last_sortie_7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_7_expected_prev);
		$display ("     Real value = %b", sortie_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sortie_7_exp = sortie_7_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DECODEUR_3_x_8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] entree;
// wires                                               
wire sortie_0;
wire sortie_1;
wire sortie_2;
wire sortie_3;
wire sortie_4;
wire sortie_5;
wire sortie_6;
wire sortie_7;

wire sampler;                             

// assign statements (if any)                          
DECODEUR_3_x_8 i1 (
// port map - connection between master ports and signals/registers   
	.entree(entree),
	.sortie_0(sortie_0),
	.sortie_1(sortie_1),
	.sortie_2(sortie_2),
	.sortie_3(sortie_3),
	.sortie_4(sortie_4),
	.sortie_5(sortie_5),
	.sortie_6(sortie_6),
	.sortie_7(sortie_7)
);
// entree[ 2 ]
initial
begin
	entree[2] = 1'b1;
end 
// entree[ 1 ]
initial
begin
	entree[1] = 1'b1;
end 
// entree[ 0 ]
initial
begin
	entree[0] = 1'b1;
end 

DECODEUR_3_x_8_vlg_sample_tst tb_sample (
	.entree(entree),
	.sampler_tx(sampler)
);

DECODEUR_3_x_8_vlg_check_tst tb_out(
	.sortie_0(sortie_0),
	.sortie_1(sortie_1),
	.sortie_2(sortie_2),
	.sortie_3(sortie_3),
	.sortie_4(sortie_4),
	.sortie_5(sortie_5),
	.sortie_6(sortie_6),
	.sortie_7(sortie_7),
	.sampler_rx(sampler)
);
endmodule

