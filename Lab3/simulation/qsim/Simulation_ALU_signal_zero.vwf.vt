// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/02/2024 15:17:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALU_8BITS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_8BITS_vlg_sample_tst(
	data_1,
	data_2,
	selecteur_alu,
	sampler_tx
);
input [7:0] data_1;
input [7:0] data_2;
input [2:0] selecteur_alu;
output sampler_tx;

reg sample;
time current_time;
always @(data_1 or data_2 or selecteur_alu)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALU_8BITS_vlg_check_tst (
	ALU_resultat,
	signal_zero,
	sampler_rx
);
input [7:0] ALU_resultat;
input  signal_zero;
input sampler_rx;

reg [7:0] ALU_resultat_expected;
reg  signal_zero_expected;

reg [7:0] ALU_resultat_prev;
reg  signal_zero_prev;

reg [7:0] ALU_resultat_expected_prev;
reg  signal_zero_expected_prev;

reg [7:0] last_ALU_resultat_exp;
reg  last_signal_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_resultat_prev = ALU_resultat;
	signal_zero_prev = signal_zero;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_resultat_expected_prev = ALU_resultat_expected;
	signal_zero_expected_prev = signal_zero_expected;
end


// expected ALU_resultat[ 7 ]
initial
begin
	ALU_resultat_expected[7] = 1'bX;
end 
// expected ALU_resultat[ 6 ]
initial
begin
	ALU_resultat_expected[6] = 1'bX;
end 
// expected ALU_resultat[ 5 ]
initial
begin
	ALU_resultat_expected[5] = 1'bX;
end 
// expected ALU_resultat[ 4 ]
initial
begin
	ALU_resultat_expected[4] = 1'bX;
end 
// expected ALU_resultat[ 3 ]
initial
begin
	ALU_resultat_expected[3] = 1'bX;
end 
// expected ALU_resultat[ 2 ]
initial
begin
	ALU_resultat_expected[2] = 1'bX;
end 
// expected ALU_resultat[ 1 ]
initial
begin
	ALU_resultat_expected[1] = 1'bX;
end 
// expected ALU_resultat[ 0 ]
initial
begin
	ALU_resultat_expected[0] = 1'bX;
end 

// expected signal_zero
initial
begin
	signal_zero_expected = 1'bX;
end 
// generate trigger
always @(ALU_resultat_expected or ALU_resultat or signal_zero_expected or signal_zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_resultat = %b | expected signal_zero = %b | ",ALU_resultat_expected_prev,signal_zero_expected_prev);
	$display("| real ALU_resultat = %b | real signal_zero = %b | ",ALU_resultat_prev,signal_zero_prev);
`endif
	if (
		( ALU_resultat_expected_prev[0] !== 1'bx ) && ( ALU_resultat_prev[0] !== ALU_resultat_expected_prev[0] )
		&& ((ALU_resultat_expected_prev[0] !== last_ALU_resultat_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_resultat[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_resultat_expected_prev);
		$display ("     Real value = %b", ALU_resultat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_resultat_exp[0] = ALU_resultat_expected_prev[0];
	end
	if (
		( ALU_resultat_expected_prev[1] !== 1'bx ) && ( ALU_resultat_prev[1] !== ALU_resultat_expected_prev[1] )
		&& ((ALU_resultat_expected_prev[1] !== last_ALU_resultat_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_resultat[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_resultat_expected_prev);
		$display ("     Real value = %b", ALU_resultat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_resultat_exp[1] = ALU_resultat_expected_prev[1];
	end
	if (
		( ALU_resultat_expected_prev[2] !== 1'bx ) && ( ALU_resultat_prev[2] !== ALU_resultat_expected_prev[2] )
		&& ((ALU_resultat_expected_prev[2] !== last_ALU_resultat_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_resultat[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_resultat_expected_prev);
		$display ("     Real value = %b", ALU_resultat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_resultat_exp[2] = ALU_resultat_expected_prev[2];
	end
	if (
		( ALU_resultat_expected_prev[3] !== 1'bx ) && ( ALU_resultat_prev[3] !== ALU_resultat_expected_prev[3] )
		&& ((ALU_resultat_expected_prev[3] !== last_ALU_resultat_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_resultat[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_resultat_expected_prev);
		$display ("     Real value = %b", ALU_resultat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_resultat_exp[3] = ALU_resultat_expected_prev[3];
	end
	if (
		( ALU_resultat_expected_prev[4] !== 1'bx ) && ( ALU_resultat_prev[4] !== ALU_resultat_expected_prev[4] )
		&& ((ALU_resultat_expected_prev[4] !== last_ALU_resultat_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_resultat[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_resultat_expected_prev);
		$display ("     Real value = %b", ALU_resultat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_resultat_exp[4] = ALU_resultat_expected_prev[4];
	end
	if (
		( ALU_resultat_expected_prev[5] !== 1'bx ) && ( ALU_resultat_prev[5] !== ALU_resultat_expected_prev[5] )
		&& ((ALU_resultat_expected_prev[5] !== last_ALU_resultat_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_resultat[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_resultat_expected_prev);
		$display ("     Real value = %b", ALU_resultat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_resultat_exp[5] = ALU_resultat_expected_prev[5];
	end
	if (
		( ALU_resultat_expected_prev[6] !== 1'bx ) && ( ALU_resultat_prev[6] !== ALU_resultat_expected_prev[6] )
		&& ((ALU_resultat_expected_prev[6] !== last_ALU_resultat_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_resultat[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_resultat_expected_prev);
		$display ("     Real value = %b", ALU_resultat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_resultat_exp[6] = ALU_resultat_expected_prev[6];
	end
	if (
		( ALU_resultat_expected_prev[7] !== 1'bx ) && ( ALU_resultat_prev[7] !== ALU_resultat_expected_prev[7] )
		&& ((ALU_resultat_expected_prev[7] !== last_ALU_resultat_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_resultat[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_resultat_expected_prev);
		$display ("     Real value = %b", ALU_resultat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_resultat_exp[7] = ALU_resultat_expected_prev[7];
	end
	if (
		( signal_zero_expected_prev !== 1'bx ) && ( signal_zero_prev !== signal_zero_expected_prev )
		&& ((signal_zero_expected_prev !== last_signal_zero_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port signal_zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", signal_zero_expected_prev);
		$display ("     Real value = %b", signal_zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_signal_zero_exp = signal_zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALU_8BITS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] data_1;
reg [7:0] data_2;
reg [2:0] selecteur_alu;
// wires                                               
wire [7:0] ALU_resultat;
wire signal_zero;

wire sampler;                             

// assign statements (if any)                          
ALU_8BITS i1 (
// port map - connection between master ports and signals/registers   
	.ALU_resultat(ALU_resultat),
	.data_1(data_1),
	.data_2(data_2),
	.selecteur_alu(selecteur_alu),
	.signal_zero(signal_zero)
);
// data_1[ 7 ]
initial
begin
	data_1[7] = 1'b0;
end 
// data_1[ 6 ]
initial
begin
	data_1[6] = 1'b0;
end 
// data_1[ 5 ]
initial
begin
	data_1[5] = 1'b1;
end 
// data_1[ 4 ]
initial
begin
	data_1[4] = 1'b1;
end 
// data_1[ 3 ]
initial
begin
	data_1[3] = 1'b1;
end 
// data_1[ 2 ]
initial
begin
	data_1[2] = 1'b0;
end 
// data_1[ 1 ]
initial
begin
	data_1[1] = 1'b0;
end 
// data_1[ 0 ]
initial
begin
	data_1[0] = 1'b0;
end 
// data_2[ 7 ]
initial
begin
	data_2[7] = 1'b0;
end 
// data_2[ 6 ]
initial
begin
	data_2[6] = 1'b1;
end 
// data_2[ 5 ]
initial
begin
	data_2[5] = 1'b0;
end 
// data_2[ 4 ]
initial
begin
	data_2[4] = 1'b0;
end 
// data_2[ 3 ]
initial
begin
	data_2[3] = 1'b1;
end 
// data_2[ 2 ]
initial
begin
	data_2[2] = 1'b1;
end 
// data_2[ 1 ]
initial
begin
	data_2[1] = 1'b1;
end 
// data_2[ 0 ]
initial
begin
	data_2[0] = 1'b1;
end 
// selecteur_alu[ 2 ]
initial
begin
	selecteur_alu[2] = 1'b1;
end 
// selecteur_alu[ 1 ]
initial
begin
	selecteur_alu[1] = 1'b0;
end 
// selecteur_alu[ 0 ]
initial
begin
	selecteur_alu[0] = 1'b0;
end 

ALU_8BITS_vlg_sample_tst tb_sample (
	.data_1(data_1),
	.data_2(data_2),
	.selecteur_alu(selecteur_alu),
	.sampler_tx(sampler)
);

ALU_8BITS_vlg_check_tst tb_out(
	.ALU_resultat(ALU_resultat),
	.signal_zero(signal_zero),
	.sampler_rx(sampler)
);
endmodule

