// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/19/2024 21:00:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Processor_MIPS_with_Pipelines_diagram
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Processor_MIPS_with_Pipelines_diagram_vlg_sample_tst(
	Clock,
	PC_PLUS_1,
	Reset_bar,
	sampler_tx
);
input  Clock;
input [7:0] PC_PLUS_1;
input  Reset_bar;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or PC_PLUS_1 or Reset_bar)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Processor_MIPS_with_Pipelines_diagram_vlg_check_tst (
	ALU_res,
	data_memory,
	entree_ALU_1,
	entree_ALU_2,
	Forward_A,
	Forward_B,
	IF_ID_WRITE,
	Instruction_EX_MEM,
	Instruction_ID_EX,
	Instruction_IF_ID,
	Instruction_MEM_WB,
	PC_WRITE,
	RD_EX_MEM,
	RD_MEM_WB,
	REG_WRITE_EX_MEM,
	REG_WRITE_MEM_WB,
	RS_ID_EX,
	RT_ID_EX,
	sampler_rx
);
input [7:0] ALU_res;
input [7:0] data_memory;
input [7:0] entree_ALU_1;
input [7:0] entree_ALU_2;
input [1:0] Forward_A;
input [1:0] Forward_B;
input  IF_ID_WRITE;
input [31:0] Instruction_EX_MEM;
input [31:0] Instruction_ID_EX;
input [31:0] Instruction_IF_ID;
input [31:0] Instruction_MEM_WB;
input  PC_WRITE;
input [4:0] RD_EX_MEM;
input [4:0] RD_MEM_WB;
input  REG_WRITE_EX_MEM;
input  REG_WRITE_MEM_WB;
input [4:0] RS_ID_EX;
input [4:0] RT_ID_EX;
input sampler_rx;

reg [7:0] ALU_res_expected;
reg [7:0] data_memory_expected;
reg [7:0] entree_ALU_1_expected;
reg [7:0] entree_ALU_2_expected;
reg [1:0] Forward_A_expected;
reg [1:0] Forward_B_expected;
reg  IF_ID_WRITE_expected;
reg [31:0] Instruction_EX_MEM_expected;
reg [31:0] Instruction_ID_EX_expected;
reg [31:0] Instruction_IF_ID_expected;
reg [31:0] Instruction_MEM_WB_expected;
reg  PC_WRITE_expected;
reg [4:0] RD_EX_MEM_expected;
reg [4:0] RD_MEM_WB_expected;
reg  REG_WRITE_EX_MEM_expected;
reg  REG_WRITE_MEM_WB_expected;
reg [4:0] RS_ID_EX_expected;
reg [4:0] RT_ID_EX_expected;

reg [7:0] ALU_res_prev;
reg [7:0] data_memory_prev;
reg [7:0] entree_ALU_1_prev;
reg [7:0] entree_ALU_2_prev;
reg [1:0] Forward_A_prev;
reg [1:0] Forward_B_prev;
reg  IF_ID_WRITE_prev;
reg [31:0] Instruction_EX_MEM_prev;
reg [31:0] Instruction_ID_EX_prev;
reg [31:0] Instruction_IF_ID_prev;
reg [31:0] Instruction_MEM_WB_prev;
reg  PC_WRITE_prev;
reg [4:0] RD_EX_MEM_prev;
reg [4:0] RD_MEM_WB_prev;
reg  REG_WRITE_EX_MEM_prev;
reg  REG_WRITE_MEM_WB_prev;
reg [4:0] RS_ID_EX_prev;
reg [4:0] RT_ID_EX_prev;

reg [7:0] ALU_res_expected_prev;
reg [7:0] data_memory_expected_prev;
reg [7:0] entree_ALU_1_expected_prev;
reg [7:0] entree_ALU_2_expected_prev;
reg [1:0] Forward_A_expected_prev;
reg [1:0] Forward_B_expected_prev;
reg  IF_ID_WRITE_expected_prev;
reg [31:0] Instruction_EX_MEM_expected_prev;
reg [31:0] Instruction_ID_EX_expected_prev;
reg [31:0] Instruction_IF_ID_expected_prev;
reg [31:0] Instruction_MEM_WB_expected_prev;
reg  PC_WRITE_expected_prev;
reg [4:0] RD_EX_MEM_expected_prev;
reg [4:0] RD_MEM_WB_expected_prev;
reg  REG_WRITE_EX_MEM_expected_prev;
reg  REG_WRITE_MEM_WB_expected_prev;
reg [4:0] RS_ID_EX_expected_prev;
reg [4:0] RT_ID_EX_expected_prev;

reg [7:0] last_ALU_res_exp;
reg [7:0] last_data_memory_exp;
reg [7:0] last_entree_ALU_1_exp;
reg [7:0] last_entree_ALU_2_exp;
reg [1:0] last_Forward_A_exp;
reg [1:0] last_Forward_B_exp;
reg  last_IF_ID_WRITE_exp;
reg [31:0] last_Instruction_EX_MEM_exp;
reg [31:0] last_Instruction_ID_EX_exp;
reg [31:0] last_Instruction_IF_ID_exp;
reg [31:0] last_Instruction_MEM_WB_exp;
reg  last_PC_WRITE_exp;
reg [4:0] last_RD_EX_MEM_exp;
reg [4:0] last_RD_MEM_WB_exp;
reg  last_REG_WRITE_EX_MEM_exp;
reg  last_REG_WRITE_MEM_WB_exp;
reg [4:0] last_RS_ID_EX_exp;
reg [4:0] last_RT_ID_EX_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:18] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 18'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_res_prev = ALU_res;
	data_memory_prev = data_memory;
	entree_ALU_1_prev = entree_ALU_1;
	entree_ALU_2_prev = entree_ALU_2;
	Forward_A_prev = Forward_A;
	Forward_B_prev = Forward_B;
	IF_ID_WRITE_prev = IF_ID_WRITE;
	Instruction_EX_MEM_prev = Instruction_EX_MEM;
	Instruction_ID_EX_prev = Instruction_ID_EX;
	Instruction_IF_ID_prev = Instruction_IF_ID;
	Instruction_MEM_WB_prev = Instruction_MEM_WB;
	PC_WRITE_prev = PC_WRITE;
	RD_EX_MEM_prev = RD_EX_MEM;
	RD_MEM_WB_prev = RD_MEM_WB;
	REG_WRITE_EX_MEM_prev = REG_WRITE_EX_MEM;
	REG_WRITE_MEM_WB_prev = REG_WRITE_MEM_WB;
	RS_ID_EX_prev = RS_ID_EX;
	RT_ID_EX_prev = RT_ID_EX;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_res_expected_prev = ALU_res_expected;
	data_memory_expected_prev = data_memory_expected;
	entree_ALU_1_expected_prev = entree_ALU_1_expected;
	entree_ALU_2_expected_prev = entree_ALU_2_expected;
	Forward_A_expected_prev = Forward_A_expected;
	Forward_B_expected_prev = Forward_B_expected;
	IF_ID_WRITE_expected_prev = IF_ID_WRITE_expected;
	Instruction_EX_MEM_expected_prev = Instruction_EX_MEM_expected;
	Instruction_ID_EX_expected_prev = Instruction_ID_EX_expected;
	Instruction_IF_ID_expected_prev = Instruction_IF_ID_expected;
	Instruction_MEM_WB_expected_prev = Instruction_MEM_WB_expected;
	PC_WRITE_expected_prev = PC_WRITE_expected;
	RD_EX_MEM_expected_prev = RD_EX_MEM_expected;
	RD_MEM_WB_expected_prev = RD_MEM_WB_expected;
	REG_WRITE_EX_MEM_expected_prev = REG_WRITE_EX_MEM_expected;
	REG_WRITE_MEM_WB_expected_prev = REG_WRITE_MEM_WB_expected;
	RS_ID_EX_expected_prev = RS_ID_EX_expected;
	RT_ID_EX_expected_prev = RT_ID_EX_expected;
end


// expected Instruction_IF_ID[ 31 ]
initial
begin
	Instruction_IF_ID_expected[31] = 1'bX;
end 
// expected Instruction_IF_ID[ 30 ]
initial
begin
	Instruction_IF_ID_expected[30] = 1'bX;
end 
// expected Instruction_IF_ID[ 29 ]
initial
begin
	Instruction_IF_ID_expected[29] = 1'bX;
end 
// expected Instruction_IF_ID[ 28 ]
initial
begin
	Instruction_IF_ID_expected[28] = 1'bX;
end 
// expected Instruction_IF_ID[ 27 ]
initial
begin
	Instruction_IF_ID_expected[27] = 1'bX;
end 
// expected Instruction_IF_ID[ 26 ]
initial
begin
	Instruction_IF_ID_expected[26] = 1'bX;
end 
// expected Instruction_IF_ID[ 25 ]
initial
begin
	Instruction_IF_ID_expected[25] = 1'bX;
end 
// expected Instruction_IF_ID[ 24 ]
initial
begin
	Instruction_IF_ID_expected[24] = 1'bX;
end 
// expected Instruction_IF_ID[ 23 ]
initial
begin
	Instruction_IF_ID_expected[23] = 1'bX;
end 
// expected Instruction_IF_ID[ 22 ]
initial
begin
	Instruction_IF_ID_expected[22] = 1'bX;
end 
// expected Instruction_IF_ID[ 21 ]
initial
begin
	Instruction_IF_ID_expected[21] = 1'bX;
end 
// expected Instruction_IF_ID[ 20 ]
initial
begin
	Instruction_IF_ID_expected[20] = 1'bX;
end 
// expected Instruction_IF_ID[ 19 ]
initial
begin
	Instruction_IF_ID_expected[19] = 1'bX;
end 
// expected Instruction_IF_ID[ 18 ]
initial
begin
	Instruction_IF_ID_expected[18] = 1'bX;
end 
// expected Instruction_IF_ID[ 17 ]
initial
begin
	Instruction_IF_ID_expected[17] = 1'bX;
end 
// expected Instruction_IF_ID[ 16 ]
initial
begin
	Instruction_IF_ID_expected[16] = 1'bX;
end 
// expected Instruction_IF_ID[ 15 ]
initial
begin
	Instruction_IF_ID_expected[15] = 1'bX;
end 
// expected Instruction_IF_ID[ 14 ]
initial
begin
	Instruction_IF_ID_expected[14] = 1'bX;
end 
// expected Instruction_IF_ID[ 13 ]
initial
begin
	Instruction_IF_ID_expected[13] = 1'bX;
end 
// expected Instruction_IF_ID[ 12 ]
initial
begin
	Instruction_IF_ID_expected[12] = 1'bX;
end 
// expected Instruction_IF_ID[ 11 ]
initial
begin
	Instruction_IF_ID_expected[11] = 1'bX;
end 
// expected Instruction_IF_ID[ 10 ]
initial
begin
	Instruction_IF_ID_expected[10] = 1'bX;
end 
// expected Instruction_IF_ID[ 9 ]
initial
begin
	Instruction_IF_ID_expected[9] = 1'bX;
end 
// expected Instruction_IF_ID[ 8 ]
initial
begin
	Instruction_IF_ID_expected[8] = 1'bX;
end 
// expected Instruction_IF_ID[ 7 ]
initial
begin
	Instruction_IF_ID_expected[7] = 1'bX;
end 
// expected Instruction_IF_ID[ 6 ]
initial
begin
	Instruction_IF_ID_expected[6] = 1'bX;
end 
// expected Instruction_IF_ID[ 5 ]
initial
begin
	Instruction_IF_ID_expected[5] = 1'bX;
end 
// expected Instruction_IF_ID[ 4 ]
initial
begin
	Instruction_IF_ID_expected[4] = 1'bX;
end 
// expected Instruction_IF_ID[ 3 ]
initial
begin
	Instruction_IF_ID_expected[3] = 1'bX;
end 
// expected Instruction_IF_ID[ 2 ]
initial
begin
	Instruction_IF_ID_expected[2] = 1'bX;
end 
// expected Instruction_IF_ID[ 1 ]
initial
begin
	Instruction_IF_ID_expected[1] = 1'bX;
end 
// expected Instruction_IF_ID[ 0 ]
initial
begin
	Instruction_IF_ID_expected[0] = 1'bX;
end 
// expected Instruction_ID_EX[ 31 ]
initial
begin
	Instruction_ID_EX_expected[31] = 1'bX;
end 
// expected Instruction_ID_EX[ 30 ]
initial
begin
	Instruction_ID_EX_expected[30] = 1'bX;
end 
// expected Instruction_ID_EX[ 29 ]
initial
begin
	Instruction_ID_EX_expected[29] = 1'bX;
end 
// expected Instruction_ID_EX[ 28 ]
initial
begin
	Instruction_ID_EX_expected[28] = 1'bX;
end 
// expected Instruction_ID_EX[ 27 ]
initial
begin
	Instruction_ID_EX_expected[27] = 1'bX;
end 
// expected Instruction_ID_EX[ 26 ]
initial
begin
	Instruction_ID_EX_expected[26] = 1'bX;
end 
// expected Instruction_ID_EX[ 25 ]
initial
begin
	Instruction_ID_EX_expected[25] = 1'bX;
end 
// expected Instruction_ID_EX[ 24 ]
initial
begin
	Instruction_ID_EX_expected[24] = 1'bX;
end 
// expected Instruction_ID_EX[ 23 ]
initial
begin
	Instruction_ID_EX_expected[23] = 1'bX;
end 
// expected Instruction_ID_EX[ 22 ]
initial
begin
	Instruction_ID_EX_expected[22] = 1'bX;
end 
// expected Instruction_ID_EX[ 21 ]
initial
begin
	Instruction_ID_EX_expected[21] = 1'bX;
end 
// expected Instruction_ID_EX[ 20 ]
initial
begin
	Instruction_ID_EX_expected[20] = 1'bX;
end 
// expected Instruction_ID_EX[ 19 ]
initial
begin
	Instruction_ID_EX_expected[19] = 1'bX;
end 
// expected Instruction_ID_EX[ 18 ]
initial
begin
	Instruction_ID_EX_expected[18] = 1'bX;
end 
// expected Instruction_ID_EX[ 17 ]
initial
begin
	Instruction_ID_EX_expected[17] = 1'bX;
end 
// expected Instruction_ID_EX[ 16 ]
initial
begin
	Instruction_ID_EX_expected[16] = 1'bX;
end 
// expected Instruction_ID_EX[ 15 ]
initial
begin
	Instruction_ID_EX_expected[15] = 1'bX;
end 
// expected Instruction_ID_EX[ 14 ]
initial
begin
	Instruction_ID_EX_expected[14] = 1'bX;
end 
// expected Instruction_ID_EX[ 13 ]
initial
begin
	Instruction_ID_EX_expected[13] = 1'bX;
end 
// expected Instruction_ID_EX[ 12 ]
initial
begin
	Instruction_ID_EX_expected[12] = 1'bX;
end 
// expected Instruction_ID_EX[ 11 ]
initial
begin
	Instruction_ID_EX_expected[11] = 1'bX;
end 
// expected Instruction_ID_EX[ 10 ]
initial
begin
	Instruction_ID_EX_expected[10] = 1'bX;
end 
// expected Instruction_ID_EX[ 9 ]
initial
begin
	Instruction_ID_EX_expected[9] = 1'bX;
end 
// expected Instruction_ID_EX[ 8 ]
initial
begin
	Instruction_ID_EX_expected[8] = 1'bX;
end 
// expected Instruction_ID_EX[ 7 ]
initial
begin
	Instruction_ID_EX_expected[7] = 1'bX;
end 
// expected Instruction_ID_EX[ 6 ]
initial
begin
	Instruction_ID_EX_expected[6] = 1'bX;
end 
// expected Instruction_ID_EX[ 5 ]
initial
begin
	Instruction_ID_EX_expected[5] = 1'bX;
end 
// expected Instruction_ID_EX[ 4 ]
initial
begin
	Instruction_ID_EX_expected[4] = 1'bX;
end 
// expected Instruction_ID_EX[ 3 ]
initial
begin
	Instruction_ID_EX_expected[3] = 1'bX;
end 
// expected Instruction_ID_EX[ 2 ]
initial
begin
	Instruction_ID_EX_expected[2] = 1'bX;
end 
// expected Instruction_ID_EX[ 1 ]
initial
begin
	Instruction_ID_EX_expected[1] = 1'bX;
end 
// expected Instruction_ID_EX[ 0 ]
initial
begin
	Instruction_ID_EX_expected[0] = 1'bX;
end 
// expected Instruction_EX_MEM[ 31 ]
initial
begin
	Instruction_EX_MEM_expected[31] = 1'bX;
end 
// expected Instruction_EX_MEM[ 30 ]
initial
begin
	Instruction_EX_MEM_expected[30] = 1'bX;
end 
// expected Instruction_EX_MEM[ 29 ]
initial
begin
	Instruction_EX_MEM_expected[29] = 1'bX;
end 
// expected Instruction_EX_MEM[ 28 ]
initial
begin
	Instruction_EX_MEM_expected[28] = 1'bX;
end 
// expected Instruction_EX_MEM[ 27 ]
initial
begin
	Instruction_EX_MEM_expected[27] = 1'bX;
end 
// expected Instruction_EX_MEM[ 26 ]
initial
begin
	Instruction_EX_MEM_expected[26] = 1'bX;
end 
// expected Instruction_EX_MEM[ 25 ]
initial
begin
	Instruction_EX_MEM_expected[25] = 1'bX;
end 
// expected Instruction_EX_MEM[ 24 ]
initial
begin
	Instruction_EX_MEM_expected[24] = 1'bX;
end 
// expected Instruction_EX_MEM[ 23 ]
initial
begin
	Instruction_EX_MEM_expected[23] = 1'bX;
end 
// expected Instruction_EX_MEM[ 22 ]
initial
begin
	Instruction_EX_MEM_expected[22] = 1'bX;
end 
// expected Instruction_EX_MEM[ 21 ]
initial
begin
	Instruction_EX_MEM_expected[21] = 1'bX;
end 
// expected Instruction_EX_MEM[ 20 ]
initial
begin
	Instruction_EX_MEM_expected[20] = 1'bX;
end 
// expected Instruction_EX_MEM[ 19 ]
initial
begin
	Instruction_EX_MEM_expected[19] = 1'bX;
end 
// expected Instruction_EX_MEM[ 18 ]
initial
begin
	Instruction_EX_MEM_expected[18] = 1'bX;
end 
// expected Instruction_EX_MEM[ 17 ]
initial
begin
	Instruction_EX_MEM_expected[17] = 1'bX;
end 
// expected Instruction_EX_MEM[ 16 ]
initial
begin
	Instruction_EX_MEM_expected[16] = 1'bX;
end 
// expected Instruction_EX_MEM[ 15 ]
initial
begin
	Instruction_EX_MEM_expected[15] = 1'bX;
end 
// expected Instruction_EX_MEM[ 14 ]
initial
begin
	Instruction_EX_MEM_expected[14] = 1'bX;
end 
// expected Instruction_EX_MEM[ 13 ]
initial
begin
	Instruction_EX_MEM_expected[13] = 1'bX;
end 
// expected Instruction_EX_MEM[ 12 ]
initial
begin
	Instruction_EX_MEM_expected[12] = 1'bX;
end 
// expected Instruction_EX_MEM[ 11 ]
initial
begin
	Instruction_EX_MEM_expected[11] = 1'bX;
end 
// expected Instruction_EX_MEM[ 10 ]
initial
begin
	Instruction_EX_MEM_expected[10] = 1'bX;
end 
// expected Instruction_EX_MEM[ 9 ]
initial
begin
	Instruction_EX_MEM_expected[9] = 1'bX;
end 
// expected Instruction_EX_MEM[ 8 ]
initial
begin
	Instruction_EX_MEM_expected[8] = 1'bX;
end 
// expected Instruction_EX_MEM[ 7 ]
initial
begin
	Instruction_EX_MEM_expected[7] = 1'bX;
end 
// expected Instruction_EX_MEM[ 6 ]
initial
begin
	Instruction_EX_MEM_expected[6] = 1'bX;
end 
// expected Instruction_EX_MEM[ 5 ]
initial
begin
	Instruction_EX_MEM_expected[5] = 1'bX;
end 
// expected Instruction_EX_MEM[ 4 ]
initial
begin
	Instruction_EX_MEM_expected[4] = 1'bX;
end 
// expected Instruction_EX_MEM[ 3 ]
initial
begin
	Instruction_EX_MEM_expected[3] = 1'bX;
end 
// expected Instruction_EX_MEM[ 2 ]
initial
begin
	Instruction_EX_MEM_expected[2] = 1'bX;
end 
// expected Instruction_EX_MEM[ 1 ]
initial
begin
	Instruction_EX_MEM_expected[1] = 1'bX;
end 
// expected Instruction_EX_MEM[ 0 ]
initial
begin
	Instruction_EX_MEM_expected[0] = 1'bX;
end 
// expected Instruction_MEM_WB[ 31 ]
initial
begin
	Instruction_MEM_WB_expected[31] = 1'bX;
end 
// expected Instruction_MEM_WB[ 30 ]
initial
begin
	Instruction_MEM_WB_expected[30] = 1'bX;
end 
// expected Instruction_MEM_WB[ 29 ]
initial
begin
	Instruction_MEM_WB_expected[29] = 1'bX;
end 
// expected Instruction_MEM_WB[ 28 ]
initial
begin
	Instruction_MEM_WB_expected[28] = 1'bX;
end 
// expected Instruction_MEM_WB[ 27 ]
initial
begin
	Instruction_MEM_WB_expected[27] = 1'bX;
end 
// expected Instruction_MEM_WB[ 26 ]
initial
begin
	Instruction_MEM_WB_expected[26] = 1'bX;
end 
// expected Instruction_MEM_WB[ 25 ]
initial
begin
	Instruction_MEM_WB_expected[25] = 1'bX;
end 
// expected Instruction_MEM_WB[ 24 ]
initial
begin
	Instruction_MEM_WB_expected[24] = 1'bX;
end 
// expected Instruction_MEM_WB[ 23 ]
initial
begin
	Instruction_MEM_WB_expected[23] = 1'bX;
end 
// expected Instruction_MEM_WB[ 22 ]
initial
begin
	Instruction_MEM_WB_expected[22] = 1'bX;
end 
// expected Instruction_MEM_WB[ 21 ]
initial
begin
	Instruction_MEM_WB_expected[21] = 1'bX;
end 
// expected Instruction_MEM_WB[ 20 ]
initial
begin
	Instruction_MEM_WB_expected[20] = 1'bX;
end 
// expected Instruction_MEM_WB[ 19 ]
initial
begin
	Instruction_MEM_WB_expected[19] = 1'bX;
end 
// expected Instruction_MEM_WB[ 18 ]
initial
begin
	Instruction_MEM_WB_expected[18] = 1'bX;
end 
// expected Instruction_MEM_WB[ 17 ]
initial
begin
	Instruction_MEM_WB_expected[17] = 1'bX;
end 
// expected Instruction_MEM_WB[ 16 ]
initial
begin
	Instruction_MEM_WB_expected[16] = 1'bX;
end 
// expected Instruction_MEM_WB[ 15 ]
initial
begin
	Instruction_MEM_WB_expected[15] = 1'bX;
end 
// expected Instruction_MEM_WB[ 14 ]
initial
begin
	Instruction_MEM_WB_expected[14] = 1'bX;
end 
// expected Instruction_MEM_WB[ 13 ]
initial
begin
	Instruction_MEM_WB_expected[13] = 1'bX;
end 
// expected Instruction_MEM_WB[ 12 ]
initial
begin
	Instruction_MEM_WB_expected[12] = 1'bX;
end 
// expected Instruction_MEM_WB[ 11 ]
initial
begin
	Instruction_MEM_WB_expected[11] = 1'bX;
end 
// expected Instruction_MEM_WB[ 10 ]
initial
begin
	Instruction_MEM_WB_expected[10] = 1'bX;
end 
// expected Instruction_MEM_WB[ 9 ]
initial
begin
	Instruction_MEM_WB_expected[9] = 1'bX;
end 
// expected Instruction_MEM_WB[ 8 ]
initial
begin
	Instruction_MEM_WB_expected[8] = 1'bX;
end 
// expected Instruction_MEM_WB[ 7 ]
initial
begin
	Instruction_MEM_WB_expected[7] = 1'bX;
end 
// expected Instruction_MEM_WB[ 6 ]
initial
begin
	Instruction_MEM_WB_expected[6] = 1'bX;
end 
// expected Instruction_MEM_WB[ 5 ]
initial
begin
	Instruction_MEM_WB_expected[5] = 1'bX;
end 
// expected Instruction_MEM_WB[ 4 ]
initial
begin
	Instruction_MEM_WB_expected[4] = 1'bX;
end 
// expected Instruction_MEM_WB[ 3 ]
initial
begin
	Instruction_MEM_WB_expected[3] = 1'bX;
end 
// expected Instruction_MEM_WB[ 2 ]
initial
begin
	Instruction_MEM_WB_expected[2] = 1'bX;
end 
// expected Instruction_MEM_WB[ 1 ]
initial
begin
	Instruction_MEM_WB_expected[1] = 1'bX;
end 
// expected Instruction_MEM_WB[ 0 ]
initial
begin
	Instruction_MEM_WB_expected[0] = 1'bX;
end 
// expected entree_ALU_1[ 7 ]
initial
begin
	entree_ALU_1_expected[7] = 1'bX;
end 
// expected entree_ALU_1[ 6 ]
initial
begin
	entree_ALU_1_expected[6] = 1'bX;
end 
// expected entree_ALU_1[ 5 ]
initial
begin
	entree_ALU_1_expected[5] = 1'bX;
end 
// expected entree_ALU_1[ 4 ]
initial
begin
	entree_ALU_1_expected[4] = 1'bX;
end 
// expected entree_ALU_1[ 3 ]
initial
begin
	entree_ALU_1_expected[3] = 1'bX;
end 
// expected entree_ALU_1[ 2 ]
initial
begin
	entree_ALU_1_expected[2] = 1'bX;
end 
// expected entree_ALU_1[ 1 ]
initial
begin
	entree_ALU_1_expected[1] = 1'bX;
end 
// expected entree_ALU_1[ 0 ]
initial
begin
	entree_ALU_1_expected[0] = 1'bX;
end 
// expected entree_ALU_2[ 7 ]
initial
begin
	entree_ALU_2_expected[7] = 1'bX;
end 
// expected entree_ALU_2[ 6 ]
initial
begin
	entree_ALU_2_expected[6] = 1'bX;
end 
// expected entree_ALU_2[ 5 ]
initial
begin
	entree_ALU_2_expected[5] = 1'bX;
end 
// expected entree_ALU_2[ 4 ]
initial
begin
	entree_ALU_2_expected[4] = 1'bX;
end 
// expected entree_ALU_2[ 3 ]
initial
begin
	entree_ALU_2_expected[3] = 1'bX;
end 
// expected entree_ALU_2[ 2 ]
initial
begin
	entree_ALU_2_expected[2] = 1'bX;
end 
// expected entree_ALU_2[ 1 ]
initial
begin
	entree_ALU_2_expected[1] = 1'bX;
end 
// expected entree_ALU_2[ 0 ]
initial
begin
	entree_ALU_2_expected[0] = 1'bX;
end 
// expected ALU_res[ 7 ]
initial
begin
	ALU_res_expected[7] = 1'bX;
end 
// expected ALU_res[ 6 ]
initial
begin
	ALU_res_expected[6] = 1'bX;
end 
// expected ALU_res[ 5 ]
initial
begin
	ALU_res_expected[5] = 1'bX;
end 
// expected ALU_res[ 4 ]
initial
begin
	ALU_res_expected[4] = 1'bX;
end 
// expected ALU_res[ 3 ]
initial
begin
	ALU_res_expected[3] = 1'bX;
end 
// expected ALU_res[ 2 ]
initial
begin
	ALU_res_expected[2] = 1'bX;
end 
// expected ALU_res[ 1 ]
initial
begin
	ALU_res_expected[1] = 1'bX;
end 
// expected ALU_res[ 0 ]
initial
begin
	ALU_res_expected[0] = 1'bX;
end 
// expected data_memory[ 7 ]
initial
begin
	data_memory_expected[7] = 1'bX;
end 
// expected data_memory[ 6 ]
initial
begin
	data_memory_expected[6] = 1'bX;
end 
// expected data_memory[ 5 ]
initial
begin
	data_memory_expected[5] = 1'bX;
end 
// expected data_memory[ 4 ]
initial
begin
	data_memory_expected[4] = 1'bX;
end 
// expected data_memory[ 3 ]
initial
begin
	data_memory_expected[3] = 1'bX;
end 
// expected data_memory[ 2 ]
initial
begin
	data_memory_expected[2] = 1'bX;
end 
// expected data_memory[ 1 ]
initial
begin
	data_memory_expected[1] = 1'bX;
end 
// expected data_memory[ 0 ]
initial
begin
	data_memory_expected[0] = 1'bX;
end 
// expected Forward_A[ 1 ]
initial
begin
	Forward_A_expected[1] = 1'bX;
end 
// expected Forward_A[ 0 ]
initial
begin
	Forward_A_expected[0] = 1'bX;
end 
// expected Forward_B[ 1 ]
initial
begin
	Forward_B_expected[1] = 1'bX;
end 
// expected Forward_B[ 0 ]
initial
begin
	Forward_B_expected[0] = 1'bX;
end 
// expected RS_ID_EX[ 4 ]
initial
begin
	RS_ID_EX_expected[4] = 1'bX;
end 
// expected RS_ID_EX[ 3 ]
initial
begin
	RS_ID_EX_expected[3] = 1'bX;
end 
// expected RS_ID_EX[ 2 ]
initial
begin
	RS_ID_EX_expected[2] = 1'bX;
end 
// expected RS_ID_EX[ 1 ]
initial
begin
	RS_ID_EX_expected[1] = 1'bX;
end 
// expected RS_ID_EX[ 0 ]
initial
begin
	RS_ID_EX_expected[0] = 1'bX;
end 
// expected RT_ID_EX[ 4 ]
initial
begin
	RT_ID_EX_expected[4] = 1'bX;
end 
// expected RT_ID_EX[ 3 ]
initial
begin
	RT_ID_EX_expected[3] = 1'bX;
end 
// expected RT_ID_EX[ 2 ]
initial
begin
	RT_ID_EX_expected[2] = 1'bX;
end 
// expected RT_ID_EX[ 1 ]
initial
begin
	RT_ID_EX_expected[1] = 1'bX;
end 
// expected RT_ID_EX[ 0 ]
initial
begin
	RT_ID_EX_expected[0] = 1'bX;
end 
// expected RD_EX_MEM[ 4 ]
initial
begin
	RD_EX_MEM_expected[4] = 1'bX;
end 
// expected RD_EX_MEM[ 3 ]
initial
begin
	RD_EX_MEM_expected[3] = 1'bX;
end 
// expected RD_EX_MEM[ 2 ]
initial
begin
	RD_EX_MEM_expected[2] = 1'bX;
end 
// expected RD_EX_MEM[ 1 ]
initial
begin
	RD_EX_MEM_expected[1] = 1'bX;
end 
// expected RD_EX_MEM[ 0 ]
initial
begin
	RD_EX_MEM_expected[0] = 1'bX;
end 
// expected RD_MEM_WB[ 4 ]
initial
begin
	RD_MEM_WB_expected[4] = 1'bX;
end 
// expected RD_MEM_WB[ 3 ]
initial
begin
	RD_MEM_WB_expected[3] = 1'bX;
end 
// expected RD_MEM_WB[ 2 ]
initial
begin
	RD_MEM_WB_expected[2] = 1'bX;
end 
// expected RD_MEM_WB[ 1 ]
initial
begin
	RD_MEM_WB_expected[1] = 1'bX;
end 
// expected RD_MEM_WB[ 0 ]
initial
begin
	RD_MEM_WB_expected[0] = 1'bX;
end 

// expected REG_WRITE_EX_MEM
initial
begin
	REG_WRITE_EX_MEM_expected = 1'bX;
end 

// expected REG_WRITE_MEM_WB
initial
begin
	REG_WRITE_MEM_WB_expected = 1'bX;
end 

// expected PC_WRITE
initial
begin
	PC_WRITE_expected = 1'bX;
end 

// expected IF_ID_WRITE
initial
begin
	IF_ID_WRITE_expected = 1'bX;
end 
// generate trigger
always @(ALU_res_expected or ALU_res or data_memory_expected or data_memory or entree_ALU_1_expected or entree_ALU_1 or entree_ALU_2_expected or entree_ALU_2 or Forward_A_expected or Forward_A or Forward_B_expected or Forward_B or IF_ID_WRITE_expected or IF_ID_WRITE or Instruction_EX_MEM_expected or Instruction_EX_MEM or Instruction_ID_EX_expected or Instruction_ID_EX or Instruction_IF_ID_expected or Instruction_IF_ID or Instruction_MEM_WB_expected or Instruction_MEM_WB or PC_WRITE_expected or PC_WRITE or RD_EX_MEM_expected or RD_EX_MEM or RD_MEM_WB_expected or RD_MEM_WB or REG_WRITE_EX_MEM_expected or REG_WRITE_EX_MEM or REG_WRITE_MEM_WB_expected or REG_WRITE_MEM_WB or RS_ID_EX_expected or RS_ID_EX or RT_ID_EX_expected or RT_ID_EX)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_res = %b | expected data_memory = %b | expected entree_ALU_1 = %b | expected entree_ALU_2 = %b | expected Forward_A = %b | expected Forward_B = %b | expected IF_ID_WRITE = %b | expected Instruction_EX_MEM = %b | expected Instruction_ID_EX = %b | expected Instruction_IF_ID = %b | expected Instruction_MEM_WB = %b | expected PC_WRITE = %b | expected RD_EX_MEM = %b | expected RD_MEM_WB = %b | expected REG_WRITE_EX_MEM = %b | expected REG_WRITE_MEM_WB = %b | expected RS_ID_EX = %b | expected RT_ID_EX = %b | ",ALU_res_expected_prev,data_memory_expected_prev,entree_ALU_1_expected_prev,entree_ALU_2_expected_prev,Forward_A_expected_prev,Forward_B_expected_prev,IF_ID_WRITE_expected_prev,Instruction_EX_MEM_expected_prev,Instruction_ID_EX_expected_prev,Instruction_IF_ID_expected_prev,Instruction_MEM_WB_expected_prev,PC_WRITE_expected_prev,RD_EX_MEM_expected_prev,RD_MEM_WB_expected_prev,REG_WRITE_EX_MEM_expected_prev,REG_WRITE_MEM_WB_expected_prev,RS_ID_EX_expected_prev,RT_ID_EX_expected_prev);
	$display("| real ALU_res = %b | real data_memory = %b | real entree_ALU_1 = %b | real entree_ALU_2 = %b | real Forward_A = %b | real Forward_B = %b | real IF_ID_WRITE = %b | real Instruction_EX_MEM = %b | real Instruction_ID_EX = %b | real Instruction_IF_ID = %b | real Instruction_MEM_WB = %b | real PC_WRITE = %b | real RD_EX_MEM = %b | real RD_MEM_WB = %b | real REG_WRITE_EX_MEM = %b | real REG_WRITE_MEM_WB = %b | real RS_ID_EX = %b | real RT_ID_EX = %b | ",ALU_res_prev,data_memory_prev,entree_ALU_1_prev,entree_ALU_2_prev,Forward_A_prev,Forward_B_prev,IF_ID_WRITE_prev,Instruction_EX_MEM_prev,Instruction_ID_EX_prev,Instruction_IF_ID_prev,Instruction_MEM_WB_prev,PC_WRITE_prev,RD_EX_MEM_prev,RD_MEM_WB_prev,REG_WRITE_EX_MEM_prev,REG_WRITE_MEM_WB_prev,RS_ID_EX_prev,RT_ID_EX_prev);
`endif
	if (
		( ALU_res_expected_prev[0] !== 1'bx ) && ( ALU_res_prev[0] !== ALU_res_expected_prev[0] )
		&& ((ALU_res_expected_prev[0] !== last_ALU_res_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_res[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_res_expected_prev);
		$display ("     Real value = %b", ALU_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_res_exp[0] = ALU_res_expected_prev[0];
	end
	if (
		( ALU_res_expected_prev[1] !== 1'bx ) && ( ALU_res_prev[1] !== ALU_res_expected_prev[1] )
		&& ((ALU_res_expected_prev[1] !== last_ALU_res_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_res[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_res_expected_prev);
		$display ("     Real value = %b", ALU_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_res_exp[1] = ALU_res_expected_prev[1];
	end
	if (
		( ALU_res_expected_prev[2] !== 1'bx ) && ( ALU_res_prev[2] !== ALU_res_expected_prev[2] )
		&& ((ALU_res_expected_prev[2] !== last_ALU_res_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_res[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_res_expected_prev);
		$display ("     Real value = %b", ALU_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_res_exp[2] = ALU_res_expected_prev[2];
	end
	if (
		( ALU_res_expected_prev[3] !== 1'bx ) && ( ALU_res_prev[3] !== ALU_res_expected_prev[3] )
		&& ((ALU_res_expected_prev[3] !== last_ALU_res_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_res[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_res_expected_prev);
		$display ("     Real value = %b", ALU_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_res_exp[3] = ALU_res_expected_prev[3];
	end
	if (
		( ALU_res_expected_prev[4] !== 1'bx ) && ( ALU_res_prev[4] !== ALU_res_expected_prev[4] )
		&& ((ALU_res_expected_prev[4] !== last_ALU_res_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_res[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_res_expected_prev);
		$display ("     Real value = %b", ALU_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_res_exp[4] = ALU_res_expected_prev[4];
	end
	if (
		( ALU_res_expected_prev[5] !== 1'bx ) && ( ALU_res_prev[5] !== ALU_res_expected_prev[5] )
		&& ((ALU_res_expected_prev[5] !== last_ALU_res_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_res[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_res_expected_prev);
		$display ("     Real value = %b", ALU_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_res_exp[5] = ALU_res_expected_prev[5];
	end
	if (
		( ALU_res_expected_prev[6] !== 1'bx ) && ( ALU_res_prev[6] !== ALU_res_expected_prev[6] )
		&& ((ALU_res_expected_prev[6] !== last_ALU_res_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_res[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_res_expected_prev);
		$display ("     Real value = %b", ALU_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_res_exp[6] = ALU_res_expected_prev[6];
	end
	if (
		( ALU_res_expected_prev[7] !== 1'bx ) && ( ALU_res_prev[7] !== ALU_res_expected_prev[7] )
		&& ((ALU_res_expected_prev[7] !== last_ALU_res_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_res[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_res_expected_prev);
		$display ("     Real value = %b", ALU_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_res_exp[7] = ALU_res_expected_prev[7];
	end
	if (
		( data_memory_expected_prev[0] !== 1'bx ) && ( data_memory_prev[0] !== data_memory_expected_prev[0] )
		&& ((data_memory_expected_prev[0] !== last_data_memory_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_memory[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_memory_expected_prev);
		$display ("     Real value = %b", data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_memory_exp[0] = data_memory_expected_prev[0];
	end
	if (
		( data_memory_expected_prev[1] !== 1'bx ) && ( data_memory_prev[1] !== data_memory_expected_prev[1] )
		&& ((data_memory_expected_prev[1] !== last_data_memory_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_memory[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_memory_expected_prev);
		$display ("     Real value = %b", data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_memory_exp[1] = data_memory_expected_prev[1];
	end
	if (
		( data_memory_expected_prev[2] !== 1'bx ) && ( data_memory_prev[2] !== data_memory_expected_prev[2] )
		&& ((data_memory_expected_prev[2] !== last_data_memory_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_memory[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_memory_expected_prev);
		$display ("     Real value = %b", data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_memory_exp[2] = data_memory_expected_prev[2];
	end
	if (
		( data_memory_expected_prev[3] !== 1'bx ) && ( data_memory_prev[3] !== data_memory_expected_prev[3] )
		&& ((data_memory_expected_prev[3] !== last_data_memory_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_memory[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_memory_expected_prev);
		$display ("     Real value = %b", data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_memory_exp[3] = data_memory_expected_prev[3];
	end
	if (
		( data_memory_expected_prev[4] !== 1'bx ) && ( data_memory_prev[4] !== data_memory_expected_prev[4] )
		&& ((data_memory_expected_prev[4] !== last_data_memory_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_memory[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_memory_expected_prev);
		$display ("     Real value = %b", data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_memory_exp[4] = data_memory_expected_prev[4];
	end
	if (
		( data_memory_expected_prev[5] !== 1'bx ) && ( data_memory_prev[5] !== data_memory_expected_prev[5] )
		&& ((data_memory_expected_prev[5] !== last_data_memory_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_memory[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_memory_expected_prev);
		$display ("     Real value = %b", data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_memory_exp[5] = data_memory_expected_prev[5];
	end
	if (
		( data_memory_expected_prev[6] !== 1'bx ) && ( data_memory_prev[6] !== data_memory_expected_prev[6] )
		&& ((data_memory_expected_prev[6] !== last_data_memory_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_memory[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_memory_expected_prev);
		$display ("     Real value = %b", data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_memory_exp[6] = data_memory_expected_prev[6];
	end
	if (
		( data_memory_expected_prev[7] !== 1'bx ) && ( data_memory_prev[7] !== data_memory_expected_prev[7] )
		&& ((data_memory_expected_prev[7] !== last_data_memory_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_memory[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_memory_expected_prev);
		$display ("     Real value = %b", data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_memory_exp[7] = data_memory_expected_prev[7];
	end
	if (
		( entree_ALU_1_expected_prev[0] !== 1'bx ) && ( entree_ALU_1_prev[0] !== entree_ALU_1_expected_prev[0] )
		&& ((entree_ALU_1_expected_prev[0] !== last_entree_ALU_1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port entree_ALU_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", entree_ALU_1_expected_prev);
		$display ("     Real value = %b", entree_ALU_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_entree_ALU_1_exp[0] = entree_ALU_1_expected_prev[0];
	end
	if (
		( entree_ALU_1_expected_prev[1] !== 1'bx ) && ( entree_ALU_1_prev[1] !== entree_ALU_1_expected_prev[1] )
		&& ((entree_ALU_1_expected_prev[1] !== last_entree_ALU_1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port entree_ALU_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", entree_ALU_1_expected_prev);
		$display ("     Real value = %b", entree_ALU_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_entree_ALU_1_exp[1] = entree_ALU_1_expected_prev[1];
	end
	if (
		( entree_ALU_1_expected_prev[2] !== 1'bx ) && ( entree_ALU_1_prev[2] !== entree_ALU_1_expected_prev[2] )
		&& ((entree_ALU_1_expected_prev[2] !== last_entree_ALU_1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port entree_ALU_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", entree_ALU_1_expected_prev);
		$display ("     Real value = %b", entree_ALU_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_entree_ALU_1_exp[2] = entree_ALU_1_expected_prev[2];
	end
	if (
		( entree_ALU_1_expected_prev[3] !== 1'bx ) && ( entree_ALU_1_prev[3] !== entree_ALU_1_expected_prev[3] )
		&& ((entree_ALU_1_expected_prev[3] !== last_entree_ALU_1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port entree_ALU_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", entree_ALU_1_expected_prev);
		$display ("     Real value = %b", entree_ALU_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_entree_ALU_1_exp[3] = entree_ALU_1_expected_prev[3];
	end
	if (
		( entree_ALU_1_expected_prev[4] !== 1'bx ) && ( entree_ALU_1_prev[4] !== entree_ALU_1_expected_prev[4] )
		&& ((entree_ALU_1_expected_prev[4] !== last_entree_ALU_1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port entree_ALU_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", entree_ALU_1_expected_prev);
		$display ("     Real value = %b", entree_ALU_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_entree_ALU_1_exp[4] = entree_ALU_1_expected_prev[4];
	end
	if (
		( entree_ALU_1_expected_prev[5] !== 1'bx ) && ( entree_ALU_1_prev[5] !== entree_ALU_1_expected_prev[5] )
		&& ((entree_ALU_1_expected_prev[5] !== last_entree_ALU_1_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port entree_ALU_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", entree_ALU_1_expected_prev);
		$display ("     Real value = %b", entree_ALU_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_entree_ALU_1_exp[5] = entree_ALU_1_expected_prev[5];
	end
	if (
		( entree_ALU_1_expected_prev[6] !== 1'bx ) && ( entree_ALU_1_prev[6] !== entree_ALU_1_expected_prev[6] )
		&& ((entree_ALU_1_expected_prev[6] !== last_entree_ALU_1_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port entree_ALU_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", entree_ALU_1_expected_prev);
		$display ("     Real value = %b", entree_ALU_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_entree_ALU_1_exp[6] = entree_ALU_1_expected_prev[6];
	end
	if (
		( entree_ALU_1_expected_prev[7] !== 1'bx ) && ( entree_ALU_1_prev[7] !== entree_ALU_1_expected_prev[7] )
		&& ((entree_ALU_1_expected_prev[7] !== last_entree_ALU_1_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port entree_ALU_1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", entree_ALU_1_expected_prev);
		$display ("     Real value = %b", entree_ALU_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_entree_ALU_1_exp[7] = entree_ALU_1_expected_prev[7];
	end
	if (
		( entree_ALU_2_expected_prev[0] !== 1'bx ) && ( entree_ALU_2_prev[0] !== entree_ALU_2_expected_prev[0] )
		&& ((entree_ALU_2_expected_prev[0] !== last_entree_ALU_2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port entree_ALU_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", entree_ALU_2_expected_prev);
		$display ("     Real value = %b", entree_ALU_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_entree_ALU_2_exp[0] = entree_ALU_2_expected_prev[0];
	end
	if (
		( entree_ALU_2_expected_prev[1] !== 1'bx ) && ( entree_ALU_2_prev[1] !== entree_ALU_2_expected_prev[1] )
		&& ((entree_ALU_2_expected_prev[1] !== last_entree_ALU_2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port entree_ALU_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", entree_ALU_2_expected_prev);
		$display ("     Real value = %b", entree_ALU_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_entree_ALU_2_exp[1] = entree_ALU_2_expected_prev[1];
	end
	if (
		( entree_ALU_2_expected_prev[2] !== 1'bx ) && ( entree_ALU_2_prev[2] !== entree_ALU_2_expected_prev[2] )
		&& ((entree_ALU_2_expected_prev[2] !== last_entree_ALU_2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port entree_ALU_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", entree_ALU_2_expected_prev);
		$display ("     Real value = %b", entree_ALU_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_entree_ALU_2_exp[2] = entree_ALU_2_expected_prev[2];
	end
	if (
		( entree_ALU_2_expected_prev[3] !== 1'bx ) && ( entree_ALU_2_prev[3] !== entree_ALU_2_expected_prev[3] )
		&& ((entree_ALU_2_expected_prev[3] !== last_entree_ALU_2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port entree_ALU_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", entree_ALU_2_expected_prev);
		$display ("     Real value = %b", entree_ALU_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_entree_ALU_2_exp[3] = entree_ALU_2_expected_prev[3];
	end
	if (
		( entree_ALU_2_expected_prev[4] !== 1'bx ) && ( entree_ALU_2_prev[4] !== entree_ALU_2_expected_prev[4] )
		&& ((entree_ALU_2_expected_prev[4] !== last_entree_ALU_2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port entree_ALU_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", entree_ALU_2_expected_prev);
		$display ("     Real value = %b", entree_ALU_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_entree_ALU_2_exp[4] = entree_ALU_2_expected_prev[4];
	end
	if (
		( entree_ALU_2_expected_prev[5] !== 1'bx ) && ( entree_ALU_2_prev[5] !== entree_ALU_2_expected_prev[5] )
		&& ((entree_ALU_2_expected_prev[5] !== last_entree_ALU_2_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port entree_ALU_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", entree_ALU_2_expected_prev);
		$display ("     Real value = %b", entree_ALU_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_entree_ALU_2_exp[5] = entree_ALU_2_expected_prev[5];
	end
	if (
		( entree_ALU_2_expected_prev[6] !== 1'bx ) && ( entree_ALU_2_prev[6] !== entree_ALU_2_expected_prev[6] )
		&& ((entree_ALU_2_expected_prev[6] !== last_entree_ALU_2_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port entree_ALU_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", entree_ALU_2_expected_prev);
		$display ("     Real value = %b", entree_ALU_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_entree_ALU_2_exp[6] = entree_ALU_2_expected_prev[6];
	end
	if (
		( entree_ALU_2_expected_prev[7] !== 1'bx ) && ( entree_ALU_2_prev[7] !== entree_ALU_2_expected_prev[7] )
		&& ((entree_ALU_2_expected_prev[7] !== last_entree_ALU_2_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port entree_ALU_2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", entree_ALU_2_expected_prev);
		$display ("     Real value = %b", entree_ALU_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_entree_ALU_2_exp[7] = entree_ALU_2_expected_prev[7];
	end
	if (
		( Forward_A_expected_prev[0] !== 1'bx ) && ( Forward_A_prev[0] !== Forward_A_expected_prev[0] )
		&& ((Forward_A_expected_prev[0] !== last_Forward_A_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Forward_A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Forward_A_expected_prev);
		$display ("     Real value = %b", Forward_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Forward_A_exp[0] = Forward_A_expected_prev[0];
	end
	if (
		( Forward_A_expected_prev[1] !== 1'bx ) && ( Forward_A_prev[1] !== Forward_A_expected_prev[1] )
		&& ((Forward_A_expected_prev[1] !== last_Forward_A_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Forward_A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Forward_A_expected_prev);
		$display ("     Real value = %b", Forward_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Forward_A_exp[1] = Forward_A_expected_prev[1];
	end
	if (
		( Forward_B_expected_prev[0] !== 1'bx ) && ( Forward_B_prev[0] !== Forward_B_expected_prev[0] )
		&& ((Forward_B_expected_prev[0] !== last_Forward_B_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Forward_B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Forward_B_expected_prev);
		$display ("     Real value = %b", Forward_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Forward_B_exp[0] = Forward_B_expected_prev[0];
	end
	if (
		( Forward_B_expected_prev[1] !== 1'bx ) && ( Forward_B_prev[1] !== Forward_B_expected_prev[1] )
		&& ((Forward_B_expected_prev[1] !== last_Forward_B_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Forward_B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Forward_B_expected_prev);
		$display ("     Real value = %b", Forward_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Forward_B_exp[1] = Forward_B_expected_prev[1];
	end
	if (
		( IF_ID_WRITE_expected_prev !== 1'bx ) && ( IF_ID_WRITE_prev !== IF_ID_WRITE_expected_prev )
		&& ((IF_ID_WRITE_expected_prev !== last_IF_ID_WRITE_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IF_ID_WRITE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IF_ID_WRITE_expected_prev);
		$display ("     Real value = %b", IF_ID_WRITE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IF_ID_WRITE_exp = IF_ID_WRITE_expected_prev;
	end
	if (
		( Instruction_EX_MEM_expected_prev[0] !== 1'bx ) && ( Instruction_EX_MEM_prev[0] !== Instruction_EX_MEM_expected_prev[0] )
		&& ((Instruction_EX_MEM_expected_prev[0] !== last_Instruction_EX_MEM_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[0] = Instruction_EX_MEM_expected_prev[0];
	end
	if (
		( Instruction_EX_MEM_expected_prev[1] !== 1'bx ) && ( Instruction_EX_MEM_prev[1] !== Instruction_EX_MEM_expected_prev[1] )
		&& ((Instruction_EX_MEM_expected_prev[1] !== last_Instruction_EX_MEM_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[1] = Instruction_EX_MEM_expected_prev[1];
	end
	if (
		( Instruction_EX_MEM_expected_prev[2] !== 1'bx ) && ( Instruction_EX_MEM_prev[2] !== Instruction_EX_MEM_expected_prev[2] )
		&& ((Instruction_EX_MEM_expected_prev[2] !== last_Instruction_EX_MEM_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[2] = Instruction_EX_MEM_expected_prev[2];
	end
	if (
		( Instruction_EX_MEM_expected_prev[3] !== 1'bx ) && ( Instruction_EX_MEM_prev[3] !== Instruction_EX_MEM_expected_prev[3] )
		&& ((Instruction_EX_MEM_expected_prev[3] !== last_Instruction_EX_MEM_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[3] = Instruction_EX_MEM_expected_prev[3];
	end
	if (
		( Instruction_EX_MEM_expected_prev[4] !== 1'bx ) && ( Instruction_EX_MEM_prev[4] !== Instruction_EX_MEM_expected_prev[4] )
		&& ((Instruction_EX_MEM_expected_prev[4] !== last_Instruction_EX_MEM_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[4] = Instruction_EX_MEM_expected_prev[4];
	end
	if (
		( Instruction_EX_MEM_expected_prev[5] !== 1'bx ) && ( Instruction_EX_MEM_prev[5] !== Instruction_EX_MEM_expected_prev[5] )
		&& ((Instruction_EX_MEM_expected_prev[5] !== last_Instruction_EX_MEM_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[5] = Instruction_EX_MEM_expected_prev[5];
	end
	if (
		( Instruction_EX_MEM_expected_prev[6] !== 1'bx ) && ( Instruction_EX_MEM_prev[6] !== Instruction_EX_MEM_expected_prev[6] )
		&& ((Instruction_EX_MEM_expected_prev[6] !== last_Instruction_EX_MEM_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[6] = Instruction_EX_MEM_expected_prev[6];
	end
	if (
		( Instruction_EX_MEM_expected_prev[7] !== 1'bx ) && ( Instruction_EX_MEM_prev[7] !== Instruction_EX_MEM_expected_prev[7] )
		&& ((Instruction_EX_MEM_expected_prev[7] !== last_Instruction_EX_MEM_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[7] = Instruction_EX_MEM_expected_prev[7];
	end
	if (
		( Instruction_EX_MEM_expected_prev[8] !== 1'bx ) && ( Instruction_EX_MEM_prev[8] !== Instruction_EX_MEM_expected_prev[8] )
		&& ((Instruction_EX_MEM_expected_prev[8] !== last_Instruction_EX_MEM_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[8] = Instruction_EX_MEM_expected_prev[8];
	end
	if (
		( Instruction_EX_MEM_expected_prev[9] !== 1'bx ) && ( Instruction_EX_MEM_prev[9] !== Instruction_EX_MEM_expected_prev[9] )
		&& ((Instruction_EX_MEM_expected_prev[9] !== last_Instruction_EX_MEM_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[9] = Instruction_EX_MEM_expected_prev[9];
	end
	if (
		( Instruction_EX_MEM_expected_prev[10] !== 1'bx ) && ( Instruction_EX_MEM_prev[10] !== Instruction_EX_MEM_expected_prev[10] )
		&& ((Instruction_EX_MEM_expected_prev[10] !== last_Instruction_EX_MEM_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[10] = Instruction_EX_MEM_expected_prev[10];
	end
	if (
		( Instruction_EX_MEM_expected_prev[11] !== 1'bx ) && ( Instruction_EX_MEM_prev[11] !== Instruction_EX_MEM_expected_prev[11] )
		&& ((Instruction_EX_MEM_expected_prev[11] !== last_Instruction_EX_MEM_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[11] = Instruction_EX_MEM_expected_prev[11];
	end
	if (
		( Instruction_EX_MEM_expected_prev[12] !== 1'bx ) && ( Instruction_EX_MEM_prev[12] !== Instruction_EX_MEM_expected_prev[12] )
		&& ((Instruction_EX_MEM_expected_prev[12] !== last_Instruction_EX_MEM_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[12] = Instruction_EX_MEM_expected_prev[12];
	end
	if (
		( Instruction_EX_MEM_expected_prev[13] !== 1'bx ) && ( Instruction_EX_MEM_prev[13] !== Instruction_EX_MEM_expected_prev[13] )
		&& ((Instruction_EX_MEM_expected_prev[13] !== last_Instruction_EX_MEM_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[13] = Instruction_EX_MEM_expected_prev[13];
	end
	if (
		( Instruction_EX_MEM_expected_prev[14] !== 1'bx ) && ( Instruction_EX_MEM_prev[14] !== Instruction_EX_MEM_expected_prev[14] )
		&& ((Instruction_EX_MEM_expected_prev[14] !== last_Instruction_EX_MEM_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[14] = Instruction_EX_MEM_expected_prev[14];
	end
	if (
		( Instruction_EX_MEM_expected_prev[15] !== 1'bx ) && ( Instruction_EX_MEM_prev[15] !== Instruction_EX_MEM_expected_prev[15] )
		&& ((Instruction_EX_MEM_expected_prev[15] !== last_Instruction_EX_MEM_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[15] = Instruction_EX_MEM_expected_prev[15];
	end
	if (
		( Instruction_EX_MEM_expected_prev[16] !== 1'bx ) && ( Instruction_EX_MEM_prev[16] !== Instruction_EX_MEM_expected_prev[16] )
		&& ((Instruction_EX_MEM_expected_prev[16] !== last_Instruction_EX_MEM_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[16] = Instruction_EX_MEM_expected_prev[16];
	end
	if (
		( Instruction_EX_MEM_expected_prev[17] !== 1'bx ) && ( Instruction_EX_MEM_prev[17] !== Instruction_EX_MEM_expected_prev[17] )
		&& ((Instruction_EX_MEM_expected_prev[17] !== last_Instruction_EX_MEM_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[17] = Instruction_EX_MEM_expected_prev[17];
	end
	if (
		( Instruction_EX_MEM_expected_prev[18] !== 1'bx ) && ( Instruction_EX_MEM_prev[18] !== Instruction_EX_MEM_expected_prev[18] )
		&& ((Instruction_EX_MEM_expected_prev[18] !== last_Instruction_EX_MEM_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[18] = Instruction_EX_MEM_expected_prev[18];
	end
	if (
		( Instruction_EX_MEM_expected_prev[19] !== 1'bx ) && ( Instruction_EX_MEM_prev[19] !== Instruction_EX_MEM_expected_prev[19] )
		&& ((Instruction_EX_MEM_expected_prev[19] !== last_Instruction_EX_MEM_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[19] = Instruction_EX_MEM_expected_prev[19];
	end
	if (
		( Instruction_EX_MEM_expected_prev[20] !== 1'bx ) && ( Instruction_EX_MEM_prev[20] !== Instruction_EX_MEM_expected_prev[20] )
		&& ((Instruction_EX_MEM_expected_prev[20] !== last_Instruction_EX_MEM_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[20] = Instruction_EX_MEM_expected_prev[20];
	end
	if (
		( Instruction_EX_MEM_expected_prev[21] !== 1'bx ) && ( Instruction_EX_MEM_prev[21] !== Instruction_EX_MEM_expected_prev[21] )
		&& ((Instruction_EX_MEM_expected_prev[21] !== last_Instruction_EX_MEM_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[21] = Instruction_EX_MEM_expected_prev[21];
	end
	if (
		( Instruction_EX_MEM_expected_prev[22] !== 1'bx ) && ( Instruction_EX_MEM_prev[22] !== Instruction_EX_MEM_expected_prev[22] )
		&& ((Instruction_EX_MEM_expected_prev[22] !== last_Instruction_EX_MEM_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[22] = Instruction_EX_MEM_expected_prev[22];
	end
	if (
		( Instruction_EX_MEM_expected_prev[23] !== 1'bx ) && ( Instruction_EX_MEM_prev[23] !== Instruction_EX_MEM_expected_prev[23] )
		&& ((Instruction_EX_MEM_expected_prev[23] !== last_Instruction_EX_MEM_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[23] = Instruction_EX_MEM_expected_prev[23];
	end
	if (
		( Instruction_EX_MEM_expected_prev[24] !== 1'bx ) && ( Instruction_EX_MEM_prev[24] !== Instruction_EX_MEM_expected_prev[24] )
		&& ((Instruction_EX_MEM_expected_prev[24] !== last_Instruction_EX_MEM_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[24] = Instruction_EX_MEM_expected_prev[24];
	end
	if (
		( Instruction_EX_MEM_expected_prev[25] !== 1'bx ) && ( Instruction_EX_MEM_prev[25] !== Instruction_EX_MEM_expected_prev[25] )
		&& ((Instruction_EX_MEM_expected_prev[25] !== last_Instruction_EX_MEM_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[25] = Instruction_EX_MEM_expected_prev[25];
	end
	if (
		( Instruction_EX_MEM_expected_prev[26] !== 1'bx ) && ( Instruction_EX_MEM_prev[26] !== Instruction_EX_MEM_expected_prev[26] )
		&& ((Instruction_EX_MEM_expected_prev[26] !== last_Instruction_EX_MEM_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[26] = Instruction_EX_MEM_expected_prev[26];
	end
	if (
		( Instruction_EX_MEM_expected_prev[27] !== 1'bx ) && ( Instruction_EX_MEM_prev[27] !== Instruction_EX_MEM_expected_prev[27] )
		&& ((Instruction_EX_MEM_expected_prev[27] !== last_Instruction_EX_MEM_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[27] = Instruction_EX_MEM_expected_prev[27];
	end
	if (
		( Instruction_EX_MEM_expected_prev[28] !== 1'bx ) && ( Instruction_EX_MEM_prev[28] !== Instruction_EX_MEM_expected_prev[28] )
		&& ((Instruction_EX_MEM_expected_prev[28] !== last_Instruction_EX_MEM_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[28] = Instruction_EX_MEM_expected_prev[28];
	end
	if (
		( Instruction_EX_MEM_expected_prev[29] !== 1'bx ) && ( Instruction_EX_MEM_prev[29] !== Instruction_EX_MEM_expected_prev[29] )
		&& ((Instruction_EX_MEM_expected_prev[29] !== last_Instruction_EX_MEM_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[29] = Instruction_EX_MEM_expected_prev[29];
	end
	if (
		( Instruction_EX_MEM_expected_prev[30] !== 1'bx ) && ( Instruction_EX_MEM_prev[30] !== Instruction_EX_MEM_expected_prev[30] )
		&& ((Instruction_EX_MEM_expected_prev[30] !== last_Instruction_EX_MEM_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[30] = Instruction_EX_MEM_expected_prev[30];
	end
	if (
		( Instruction_EX_MEM_expected_prev[31] !== 1'bx ) && ( Instruction_EX_MEM_prev[31] !== Instruction_EX_MEM_expected_prev[31] )
		&& ((Instruction_EX_MEM_expected_prev[31] !== last_Instruction_EX_MEM_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX_MEM[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_MEM_expected_prev);
		$display ("     Real value = %b", Instruction_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Instruction_EX_MEM_exp[31] = Instruction_EX_MEM_expected_prev[31];
	end
	if (
		( Instruction_ID_EX_expected_prev[0] !== 1'bx ) && ( Instruction_ID_EX_prev[0] !== Instruction_ID_EX_expected_prev[0] )
		&& ((Instruction_ID_EX_expected_prev[0] !== last_Instruction_ID_EX_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[0] = Instruction_ID_EX_expected_prev[0];
	end
	if (
		( Instruction_ID_EX_expected_prev[1] !== 1'bx ) && ( Instruction_ID_EX_prev[1] !== Instruction_ID_EX_expected_prev[1] )
		&& ((Instruction_ID_EX_expected_prev[1] !== last_Instruction_ID_EX_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[1] = Instruction_ID_EX_expected_prev[1];
	end
	if (
		( Instruction_ID_EX_expected_prev[2] !== 1'bx ) && ( Instruction_ID_EX_prev[2] !== Instruction_ID_EX_expected_prev[2] )
		&& ((Instruction_ID_EX_expected_prev[2] !== last_Instruction_ID_EX_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[2] = Instruction_ID_EX_expected_prev[2];
	end
	if (
		( Instruction_ID_EX_expected_prev[3] !== 1'bx ) && ( Instruction_ID_EX_prev[3] !== Instruction_ID_EX_expected_prev[3] )
		&& ((Instruction_ID_EX_expected_prev[3] !== last_Instruction_ID_EX_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[3] = Instruction_ID_EX_expected_prev[3];
	end
	if (
		( Instruction_ID_EX_expected_prev[4] !== 1'bx ) && ( Instruction_ID_EX_prev[4] !== Instruction_ID_EX_expected_prev[4] )
		&& ((Instruction_ID_EX_expected_prev[4] !== last_Instruction_ID_EX_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[4] = Instruction_ID_EX_expected_prev[4];
	end
	if (
		( Instruction_ID_EX_expected_prev[5] !== 1'bx ) && ( Instruction_ID_EX_prev[5] !== Instruction_ID_EX_expected_prev[5] )
		&& ((Instruction_ID_EX_expected_prev[5] !== last_Instruction_ID_EX_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[5] = Instruction_ID_EX_expected_prev[5];
	end
	if (
		( Instruction_ID_EX_expected_prev[6] !== 1'bx ) && ( Instruction_ID_EX_prev[6] !== Instruction_ID_EX_expected_prev[6] )
		&& ((Instruction_ID_EX_expected_prev[6] !== last_Instruction_ID_EX_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[6] = Instruction_ID_EX_expected_prev[6];
	end
	if (
		( Instruction_ID_EX_expected_prev[7] !== 1'bx ) && ( Instruction_ID_EX_prev[7] !== Instruction_ID_EX_expected_prev[7] )
		&& ((Instruction_ID_EX_expected_prev[7] !== last_Instruction_ID_EX_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[7] = Instruction_ID_EX_expected_prev[7];
	end
	if (
		( Instruction_ID_EX_expected_prev[8] !== 1'bx ) && ( Instruction_ID_EX_prev[8] !== Instruction_ID_EX_expected_prev[8] )
		&& ((Instruction_ID_EX_expected_prev[8] !== last_Instruction_ID_EX_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[8] = Instruction_ID_EX_expected_prev[8];
	end
	if (
		( Instruction_ID_EX_expected_prev[9] !== 1'bx ) && ( Instruction_ID_EX_prev[9] !== Instruction_ID_EX_expected_prev[9] )
		&& ((Instruction_ID_EX_expected_prev[9] !== last_Instruction_ID_EX_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[9] = Instruction_ID_EX_expected_prev[9];
	end
	if (
		( Instruction_ID_EX_expected_prev[10] !== 1'bx ) && ( Instruction_ID_EX_prev[10] !== Instruction_ID_EX_expected_prev[10] )
		&& ((Instruction_ID_EX_expected_prev[10] !== last_Instruction_ID_EX_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[10] = Instruction_ID_EX_expected_prev[10];
	end
	if (
		( Instruction_ID_EX_expected_prev[11] !== 1'bx ) && ( Instruction_ID_EX_prev[11] !== Instruction_ID_EX_expected_prev[11] )
		&& ((Instruction_ID_EX_expected_prev[11] !== last_Instruction_ID_EX_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[11] = Instruction_ID_EX_expected_prev[11];
	end
	if (
		( Instruction_ID_EX_expected_prev[12] !== 1'bx ) && ( Instruction_ID_EX_prev[12] !== Instruction_ID_EX_expected_prev[12] )
		&& ((Instruction_ID_EX_expected_prev[12] !== last_Instruction_ID_EX_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[12] = Instruction_ID_EX_expected_prev[12];
	end
	if (
		( Instruction_ID_EX_expected_prev[13] !== 1'bx ) && ( Instruction_ID_EX_prev[13] !== Instruction_ID_EX_expected_prev[13] )
		&& ((Instruction_ID_EX_expected_prev[13] !== last_Instruction_ID_EX_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[13] = Instruction_ID_EX_expected_prev[13];
	end
	if (
		( Instruction_ID_EX_expected_prev[14] !== 1'bx ) && ( Instruction_ID_EX_prev[14] !== Instruction_ID_EX_expected_prev[14] )
		&& ((Instruction_ID_EX_expected_prev[14] !== last_Instruction_ID_EX_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[14] = Instruction_ID_EX_expected_prev[14];
	end
	if (
		( Instruction_ID_EX_expected_prev[15] !== 1'bx ) && ( Instruction_ID_EX_prev[15] !== Instruction_ID_EX_expected_prev[15] )
		&& ((Instruction_ID_EX_expected_prev[15] !== last_Instruction_ID_EX_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[15] = Instruction_ID_EX_expected_prev[15];
	end
	if (
		( Instruction_ID_EX_expected_prev[16] !== 1'bx ) && ( Instruction_ID_EX_prev[16] !== Instruction_ID_EX_expected_prev[16] )
		&& ((Instruction_ID_EX_expected_prev[16] !== last_Instruction_ID_EX_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[16] = Instruction_ID_EX_expected_prev[16];
	end
	if (
		( Instruction_ID_EX_expected_prev[17] !== 1'bx ) && ( Instruction_ID_EX_prev[17] !== Instruction_ID_EX_expected_prev[17] )
		&& ((Instruction_ID_EX_expected_prev[17] !== last_Instruction_ID_EX_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[17] = Instruction_ID_EX_expected_prev[17];
	end
	if (
		( Instruction_ID_EX_expected_prev[18] !== 1'bx ) && ( Instruction_ID_EX_prev[18] !== Instruction_ID_EX_expected_prev[18] )
		&& ((Instruction_ID_EX_expected_prev[18] !== last_Instruction_ID_EX_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[18] = Instruction_ID_EX_expected_prev[18];
	end
	if (
		( Instruction_ID_EX_expected_prev[19] !== 1'bx ) && ( Instruction_ID_EX_prev[19] !== Instruction_ID_EX_expected_prev[19] )
		&& ((Instruction_ID_EX_expected_prev[19] !== last_Instruction_ID_EX_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[19] = Instruction_ID_EX_expected_prev[19];
	end
	if (
		( Instruction_ID_EX_expected_prev[20] !== 1'bx ) && ( Instruction_ID_EX_prev[20] !== Instruction_ID_EX_expected_prev[20] )
		&& ((Instruction_ID_EX_expected_prev[20] !== last_Instruction_ID_EX_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[20] = Instruction_ID_EX_expected_prev[20];
	end
	if (
		( Instruction_ID_EX_expected_prev[21] !== 1'bx ) && ( Instruction_ID_EX_prev[21] !== Instruction_ID_EX_expected_prev[21] )
		&& ((Instruction_ID_EX_expected_prev[21] !== last_Instruction_ID_EX_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[21] = Instruction_ID_EX_expected_prev[21];
	end
	if (
		( Instruction_ID_EX_expected_prev[22] !== 1'bx ) && ( Instruction_ID_EX_prev[22] !== Instruction_ID_EX_expected_prev[22] )
		&& ((Instruction_ID_EX_expected_prev[22] !== last_Instruction_ID_EX_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[22] = Instruction_ID_EX_expected_prev[22];
	end
	if (
		( Instruction_ID_EX_expected_prev[23] !== 1'bx ) && ( Instruction_ID_EX_prev[23] !== Instruction_ID_EX_expected_prev[23] )
		&& ((Instruction_ID_EX_expected_prev[23] !== last_Instruction_ID_EX_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[23] = Instruction_ID_EX_expected_prev[23];
	end
	if (
		( Instruction_ID_EX_expected_prev[24] !== 1'bx ) && ( Instruction_ID_EX_prev[24] !== Instruction_ID_EX_expected_prev[24] )
		&& ((Instruction_ID_EX_expected_prev[24] !== last_Instruction_ID_EX_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[24] = Instruction_ID_EX_expected_prev[24];
	end
	if (
		( Instruction_ID_EX_expected_prev[25] !== 1'bx ) && ( Instruction_ID_EX_prev[25] !== Instruction_ID_EX_expected_prev[25] )
		&& ((Instruction_ID_EX_expected_prev[25] !== last_Instruction_ID_EX_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[25] = Instruction_ID_EX_expected_prev[25];
	end
	if (
		( Instruction_ID_EX_expected_prev[26] !== 1'bx ) && ( Instruction_ID_EX_prev[26] !== Instruction_ID_EX_expected_prev[26] )
		&& ((Instruction_ID_EX_expected_prev[26] !== last_Instruction_ID_EX_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[26] = Instruction_ID_EX_expected_prev[26];
	end
	if (
		( Instruction_ID_EX_expected_prev[27] !== 1'bx ) && ( Instruction_ID_EX_prev[27] !== Instruction_ID_EX_expected_prev[27] )
		&& ((Instruction_ID_EX_expected_prev[27] !== last_Instruction_ID_EX_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[27] = Instruction_ID_EX_expected_prev[27];
	end
	if (
		( Instruction_ID_EX_expected_prev[28] !== 1'bx ) && ( Instruction_ID_EX_prev[28] !== Instruction_ID_EX_expected_prev[28] )
		&& ((Instruction_ID_EX_expected_prev[28] !== last_Instruction_ID_EX_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[28] = Instruction_ID_EX_expected_prev[28];
	end
	if (
		( Instruction_ID_EX_expected_prev[29] !== 1'bx ) && ( Instruction_ID_EX_prev[29] !== Instruction_ID_EX_expected_prev[29] )
		&& ((Instruction_ID_EX_expected_prev[29] !== last_Instruction_ID_EX_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[29] = Instruction_ID_EX_expected_prev[29];
	end
	if (
		( Instruction_ID_EX_expected_prev[30] !== 1'bx ) && ( Instruction_ID_EX_prev[30] !== Instruction_ID_EX_expected_prev[30] )
		&& ((Instruction_ID_EX_expected_prev[30] !== last_Instruction_ID_EX_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[30] = Instruction_ID_EX_expected_prev[30];
	end
	if (
		( Instruction_ID_EX_expected_prev[31] !== 1'bx ) && ( Instruction_ID_EX_prev[31] !== Instruction_ID_EX_expected_prev[31] )
		&& ((Instruction_ID_EX_expected_prev[31] !== last_Instruction_ID_EX_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_ID_EX[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_ID_EX_expected_prev);
		$display ("     Real value = %b", Instruction_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instruction_ID_EX_exp[31] = Instruction_ID_EX_expected_prev[31];
	end
	if (
		( Instruction_IF_ID_expected_prev[0] !== 1'bx ) && ( Instruction_IF_ID_prev[0] !== Instruction_IF_ID_expected_prev[0] )
		&& ((Instruction_IF_ID_expected_prev[0] !== last_Instruction_IF_ID_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[0] = Instruction_IF_ID_expected_prev[0];
	end
	if (
		( Instruction_IF_ID_expected_prev[1] !== 1'bx ) && ( Instruction_IF_ID_prev[1] !== Instruction_IF_ID_expected_prev[1] )
		&& ((Instruction_IF_ID_expected_prev[1] !== last_Instruction_IF_ID_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[1] = Instruction_IF_ID_expected_prev[1];
	end
	if (
		( Instruction_IF_ID_expected_prev[2] !== 1'bx ) && ( Instruction_IF_ID_prev[2] !== Instruction_IF_ID_expected_prev[2] )
		&& ((Instruction_IF_ID_expected_prev[2] !== last_Instruction_IF_ID_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[2] = Instruction_IF_ID_expected_prev[2];
	end
	if (
		( Instruction_IF_ID_expected_prev[3] !== 1'bx ) && ( Instruction_IF_ID_prev[3] !== Instruction_IF_ID_expected_prev[3] )
		&& ((Instruction_IF_ID_expected_prev[3] !== last_Instruction_IF_ID_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[3] = Instruction_IF_ID_expected_prev[3];
	end
	if (
		( Instruction_IF_ID_expected_prev[4] !== 1'bx ) && ( Instruction_IF_ID_prev[4] !== Instruction_IF_ID_expected_prev[4] )
		&& ((Instruction_IF_ID_expected_prev[4] !== last_Instruction_IF_ID_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[4] = Instruction_IF_ID_expected_prev[4];
	end
	if (
		( Instruction_IF_ID_expected_prev[5] !== 1'bx ) && ( Instruction_IF_ID_prev[5] !== Instruction_IF_ID_expected_prev[5] )
		&& ((Instruction_IF_ID_expected_prev[5] !== last_Instruction_IF_ID_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[5] = Instruction_IF_ID_expected_prev[5];
	end
	if (
		( Instruction_IF_ID_expected_prev[6] !== 1'bx ) && ( Instruction_IF_ID_prev[6] !== Instruction_IF_ID_expected_prev[6] )
		&& ((Instruction_IF_ID_expected_prev[6] !== last_Instruction_IF_ID_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[6] = Instruction_IF_ID_expected_prev[6];
	end
	if (
		( Instruction_IF_ID_expected_prev[7] !== 1'bx ) && ( Instruction_IF_ID_prev[7] !== Instruction_IF_ID_expected_prev[7] )
		&& ((Instruction_IF_ID_expected_prev[7] !== last_Instruction_IF_ID_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[7] = Instruction_IF_ID_expected_prev[7];
	end
	if (
		( Instruction_IF_ID_expected_prev[8] !== 1'bx ) && ( Instruction_IF_ID_prev[8] !== Instruction_IF_ID_expected_prev[8] )
		&& ((Instruction_IF_ID_expected_prev[8] !== last_Instruction_IF_ID_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[8] = Instruction_IF_ID_expected_prev[8];
	end
	if (
		( Instruction_IF_ID_expected_prev[9] !== 1'bx ) && ( Instruction_IF_ID_prev[9] !== Instruction_IF_ID_expected_prev[9] )
		&& ((Instruction_IF_ID_expected_prev[9] !== last_Instruction_IF_ID_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[9] = Instruction_IF_ID_expected_prev[9];
	end
	if (
		( Instruction_IF_ID_expected_prev[10] !== 1'bx ) && ( Instruction_IF_ID_prev[10] !== Instruction_IF_ID_expected_prev[10] )
		&& ((Instruction_IF_ID_expected_prev[10] !== last_Instruction_IF_ID_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[10] = Instruction_IF_ID_expected_prev[10];
	end
	if (
		( Instruction_IF_ID_expected_prev[11] !== 1'bx ) && ( Instruction_IF_ID_prev[11] !== Instruction_IF_ID_expected_prev[11] )
		&& ((Instruction_IF_ID_expected_prev[11] !== last_Instruction_IF_ID_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[11] = Instruction_IF_ID_expected_prev[11];
	end
	if (
		( Instruction_IF_ID_expected_prev[12] !== 1'bx ) && ( Instruction_IF_ID_prev[12] !== Instruction_IF_ID_expected_prev[12] )
		&& ((Instruction_IF_ID_expected_prev[12] !== last_Instruction_IF_ID_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[12] = Instruction_IF_ID_expected_prev[12];
	end
	if (
		( Instruction_IF_ID_expected_prev[13] !== 1'bx ) && ( Instruction_IF_ID_prev[13] !== Instruction_IF_ID_expected_prev[13] )
		&& ((Instruction_IF_ID_expected_prev[13] !== last_Instruction_IF_ID_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[13] = Instruction_IF_ID_expected_prev[13];
	end
	if (
		( Instruction_IF_ID_expected_prev[14] !== 1'bx ) && ( Instruction_IF_ID_prev[14] !== Instruction_IF_ID_expected_prev[14] )
		&& ((Instruction_IF_ID_expected_prev[14] !== last_Instruction_IF_ID_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[14] = Instruction_IF_ID_expected_prev[14];
	end
	if (
		( Instruction_IF_ID_expected_prev[15] !== 1'bx ) && ( Instruction_IF_ID_prev[15] !== Instruction_IF_ID_expected_prev[15] )
		&& ((Instruction_IF_ID_expected_prev[15] !== last_Instruction_IF_ID_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[15] = Instruction_IF_ID_expected_prev[15];
	end
	if (
		( Instruction_IF_ID_expected_prev[16] !== 1'bx ) && ( Instruction_IF_ID_prev[16] !== Instruction_IF_ID_expected_prev[16] )
		&& ((Instruction_IF_ID_expected_prev[16] !== last_Instruction_IF_ID_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[16] = Instruction_IF_ID_expected_prev[16];
	end
	if (
		( Instruction_IF_ID_expected_prev[17] !== 1'bx ) && ( Instruction_IF_ID_prev[17] !== Instruction_IF_ID_expected_prev[17] )
		&& ((Instruction_IF_ID_expected_prev[17] !== last_Instruction_IF_ID_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[17] = Instruction_IF_ID_expected_prev[17];
	end
	if (
		( Instruction_IF_ID_expected_prev[18] !== 1'bx ) && ( Instruction_IF_ID_prev[18] !== Instruction_IF_ID_expected_prev[18] )
		&& ((Instruction_IF_ID_expected_prev[18] !== last_Instruction_IF_ID_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[18] = Instruction_IF_ID_expected_prev[18];
	end
	if (
		( Instruction_IF_ID_expected_prev[19] !== 1'bx ) && ( Instruction_IF_ID_prev[19] !== Instruction_IF_ID_expected_prev[19] )
		&& ((Instruction_IF_ID_expected_prev[19] !== last_Instruction_IF_ID_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[19] = Instruction_IF_ID_expected_prev[19];
	end
	if (
		( Instruction_IF_ID_expected_prev[20] !== 1'bx ) && ( Instruction_IF_ID_prev[20] !== Instruction_IF_ID_expected_prev[20] )
		&& ((Instruction_IF_ID_expected_prev[20] !== last_Instruction_IF_ID_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[20] = Instruction_IF_ID_expected_prev[20];
	end
	if (
		( Instruction_IF_ID_expected_prev[21] !== 1'bx ) && ( Instruction_IF_ID_prev[21] !== Instruction_IF_ID_expected_prev[21] )
		&& ((Instruction_IF_ID_expected_prev[21] !== last_Instruction_IF_ID_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[21] = Instruction_IF_ID_expected_prev[21];
	end
	if (
		( Instruction_IF_ID_expected_prev[22] !== 1'bx ) && ( Instruction_IF_ID_prev[22] !== Instruction_IF_ID_expected_prev[22] )
		&& ((Instruction_IF_ID_expected_prev[22] !== last_Instruction_IF_ID_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[22] = Instruction_IF_ID_expected_prev[22];
	end
	if (
		( Instruction_IF_ID_expected_prev[23] !== 1'bx ) && ( Instruction_IF_ID_prev[23] !== Instruction_IF_ID_expected_prev[23] )
		&& ((Instruction_IF_ID_expected_prev[23] !== last_Instruction_IF_ID_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[23] = Instruction_IF_ID_expected_prev[23];
	end
	if (
		( Instruction_IF_ID_expected_prev[24] !== 1'bx ) && ( Instruction_IF_ID_prev[24] !== Instruction_IF_ID_expected_prev[24] )
		&& ((Instruction_IF_ID_expected_prev[24] !== last_Instruction_IF_ID_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[24] = Instruction_IF_ID_expected_prev[24];
	end
	if (
		( Instruction_IF_ID_expected_prev[25] !== 1'bx ) && ( Instruction_IF_ID_prev[25] !== Instruction_IF_ID_expected_prev[25] )
		&& ((Instruction_IF_ID_expected_prev[25] !== last_Instruction_IF_ID_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[25] = Instruction_IF_ID_expected_prev[25];
	end
	if (
		( Instruction_IF_ID_expected_prev[26] !== 1'bx ) && ( Instruction_IF_ID_prev[26] !== Instruction_IF_ID_expected_prev[26] )
		&& ((Instruction_IF_ID_expected_prev[26] !== last_Instruction_IF_ID_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[26] = Instruction_IF_ID_expected_prev[26];
	end
	if (
		( Instruction_IF_ID_expected_prev[27] !== 1'bx ) && ( Instruction_IF_ID_prev[27] !== Instruction_IF_ID_expected_prev[27] )
		&& ((Instruction_IF_ID_expected_prev[27] !== last_Instruction_IF_ID_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[27] = Instruction_IF_ID_expected_prev[27];
	end
	if (
		( Instruction_IF_ID_expected_prev[28] !== 1'bx ) && ( Instruction_IF_ID_prev[28] !== Instruction_IF_ID_expected_prev[28] )
		&& ((Instruction_IF_ID_expected_prev[28] !== last_Instruction_IF_ID_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[28] = Instruction_IF_ID_expected_prev[28];
	end
	if (
		( Instruction_IF_ID_expected_prev[29] !== 1'bx ) && ( Instruction_IF_ID_prev[29] !== Instruction_IF_ID_expected_prev[29] )
		&& ((Instruction_IF_ID_expected_prev[29] !== last_Instruction_IF_ID_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[29] = Instruction_IF_ID_expected_prev[29];
	end
	if (
		( Instruction_IF_ID_expected_prev[30] !== 1'bx ) && ( Instruction_IF_ID_prev[30] !== Instruction_IF_ID_expected_prev[30] )
		&& ((Instruction_IF_ID_expected_prev[30] !== last_Instruction_IF_ID_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[30] = Instruction_IF_ID_expected_prev[30];
	end
	if (
		( Instruction_IF_ID_expected_prev[31] !== 1'bx ) && ( Instruction_IF_ID_prev[31] !== Instruction_IF_ID_expected_prev[31] )
		&& ((Instruction_IF_ID_expected_prev[31] !== last_Instruction_IF_ID_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_IF_ID[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_IF_ID_expected_prev);
		$display ("     Real value = %b", Instruction_IF_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Instruction_IF_ID_exp[31] = Instruction_IF_ID_expected_prev[31];
	end
	if (
		( Instruction_MEM_WB_expected_prev[0] !== 1'bx ) && ( Instruction_MEM_WB_prev[0] !== Instruction_MEM_WB_expected_prev[0] )
		&& ((Instruction_MEM_WB_expected_prev[0] !== last_Instruction_MEM_WB_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[0] = Instruction_MEM_WB_expected_prev[0];
	end
	if (
		( Instruction_MEM_WB_expected_prev[1] !== 1'bx ) && ( Instruction_MEM_WB_prev[1] !== Instruction_MEM_WB_expected_prev[1] )
		&& ((Instruction_MEM_WB_expected_prev[1] !== last_Instruction_MEM_WB_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[1] = Instruction_MEM_WB_expected_prev[1];
	end
	if (
		( Instruction_MEM_WB_expected_prev[2] !== 1'bx ) && ( Instruction_MEM_WB_prev[2] !== Instruction_MEM_WB_expected_prev[2] )
		&& ((Instruction_MEM_WB_expected_prev[2] !== last_Instruction_MEM_WB_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[2] = Instruction_MEM_WB_expected_prev[2];
	end
	if (
		( Instruction_MEM_WB_expected_prev[3] !== 1'bx ) && ( Instruction_MEM_WB_prev[3] !== Instruction_MEM_WB_expected_prev[3] )
		&& ((Instruction_MEM_WB_expected_prev[3] !== last_Instruction_MEM_WB_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[3] = Instruction_MEM_WB_expected_prev[3];
	end
	if (
		( Instruction_MEM_WB_expected_prev[4] !== 1'bx ) && ( Instruction_MEM_WB_prev[4] !== Instruction_MEM_WB_expected_prev[4] )
		&& ((Instruction_MEM_WB_expected_prev[4] !== last_Instruction_MEM_WB_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[4] = Instruction_MEM_WB_expected_prev[4];
	end
	if (
		( Instruction_MEM_WB_expected_prev[5] !== 1'bx ) && ( Instruction_MEM_WB_prev[5] !== Instruction_MEM_WB_expected_prev[5] )
		&& ((Instruction_MEM_WB_expected_prev[5] !== last_Instruction_MEM_WB_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[5] = Instruction_MEM_WB_expected_prev[5];
	end
	if (
		( Instruction_MEM_WB_expected_prev[6] !== 1'bx ) && ( Instruction_MEM_WB_prev[6] !== Instruction_MEM_WB_expected_prev[6] )
		&& ((Instruction_MEM_WB_expected_prev[6] !== last_Instruction_MEM_WB_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[6] = Instruction_MEM_WB_expected_prev[6];
	end
	if (
		( Instruction_MEM_WB_expected_prev[7] !== 1'bx ) && ( Instruction_MEM_WB_prev[7] !== Instruction_MEM_WB_expected_prev[7] )
		&& ((Instruction_MEM_WB_expected_prev[7] !== last_Instruction_MEM_WB_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[7] = Instruction_MEM_WB_expected_prev[7];
	end
	if (
		( Instruction_MEM_WB_expected_prev[8] !== 1'bx ) && ( Instruction_MEM_WB_prev[8] !== Instruction_MEM_WB_expected_prev[8] )
		&& ((Instruction_MEM_WB_expected_prev[8] !== last_Instruction_MEM_WB_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[8] = Instruction_MEM_WB_expected_prev[8];
	end
	if (
		( Instruction_MEM_WB_expected_prev[9] !== 1'bx ) && ( Instruction_MEM_WB_prev[9] !== Instruction_MEM_WB_expected_prev[9] )
		&& ((Instruction_MEM_WB_expected_prev[9] !== last_Instruction_MEM_WB_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[9] = Instruction_MEM_WB_expected_prev[9];
	end
	if (
		( Instruction_MEM_WB_expected_prev[10] !== 1'bx ) && ( Instruction_MEM_WB_prev[10] !== Instruction_MEM_WB_expected_prev[10] )
		&& ((Instruction_MEM_WB_expected_prev[10] !== last_Instruction_MEM_WB_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[10] = Instruction_MEM_WB_expected_prev[10];
	end
	if (
		( Instruction_MEM_WB_expected_prev[11] !== 1'bx ) && ( Instruction_MEM_WB_prev[11] !== Instruction_MEM_WB_expected_prev[11] )
		&& ((Instruction_MEM_WB_expected_prev[11] !== last_Instruction_MEM_WB_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[11] = Instruction_MEM_WB_expected_prev[11];
	end
	if (
		( Instruction_MEM_WB_expected_prev[12] !== 1'bx ) && ( Instruction_MEM_WB_prev[12] !== Instruction_MEM_WB_expected_prev[12] )
		&& ((Instruction_MEM_WB_expected_prev[12] !== last_Instruction_MEM_WB_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[12] = Instruction_MEM_WB_expected_prev[12];
	end
	if (
		( Instruction_MEM_WB_expected_prev[13] !== 1'bx ) && ( Instruction_MEM_WB_prev[13] !== Instruction_MEM_WB_expected_prev[13] )
		&& ((Instruction_MEM_WB_expected_prev[13] !== last_Instruction_MEM_WB_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[13] = Instruction_MEM_WB_expected_prev[13];
	end
	if (
		( Instruction_MEM_WB_expected_prev[14] !== 1'bx ) && ( Instruction_MEM_WB_prev[14] !== Instruction_MEM_WB_expected_prev[14] )
		&& ((Instruction_MEM_WB_expected_prev[14] !== last_Instruction_MEM_WB_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[14] = Instruction_MEM_WB_expected_prev[14];
	end
	if (
		( Instruction_MEM_WB_expected_prev[15] !== 1'bx ) && ( Instruction_MEM_WB_prev[15] !== Instruction_MEM_WB_expected_prev[15] )
		&& ((Instruction_MEM_WB_expected_prev[15] !== last_Instruction_MEM_WB_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[15] = Instruction_MEM_WB_expected_prev[15];
	end
	if (
		( Instruction_MEM_WB_expected_prev[16] !== 1'bx ) && ( Instruction_MEM_WB_prev[16] !== Instruction_MEM_WB_expected_prev[16] )
		&& ((Instruction_MEM_WB_expected_prev[16] !== last_Instruction_MEM_WB_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[16] = Instruction_MEM_WB_expected_prev[16];
	end
	if (
		( Instruction_MEM_WB_expected_prev[17] !== 1'bx ) && ( Instruction_MEM_WB_prev[17] !== Instruction_MEM_WB_expected_prev[17] )
		&& ((Instruction_MEM_WB_expected_prev[17] !== last_Instruction_MEM_WB_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[17] = Instruction_MEM_WB_expected_prev[17];
	end
	if (
		( Instruction_MEM_WB_expected_prev[18] !== 1'bx ) && ( Instruction_MEM_WB_prev[18] !== Instruction_MEM_WB_expected_prev[18] )
		&& ((Instruction_MEM_WB_expected_prev[18] !== last_Instruction_MEM_WB_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[18] = Instruction_MEM_WB_expected_prev[18];
	end
	if (
		( Instruction_MEM_WB_expected_prev[19] !== 1'bx ) && ( Instruction_MEM_WB_prev[19] !== Instruction_MEM_WB_expected_prev[19] )
		&& ((Instruction_MEM_WB_expected_prev[19] !== last_Instruction_MEM_WB_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[19] = Instruction_MEM_WB_expected_prev[19];
	end
	if (
		( Instruction_MEM_WB_expected_prev[20] !== 1'bx ) && ( Instruction_MEM_WB_prev[20] !== Instruction_MEM_WB_expected_prev[20] )
		&& ((Instruction_MEM_WB_expected_prev[20] !== last_Instruction_MEM_WB_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[20] = Instruction_MEM_WB_expected_prev[20];
	end
	if (
		( Instruction_MEM_WB_expected_prev[21] !== 1'bx ) && ( Instruction_MEM_WB_prev[21] !== Instruction_MEM_WB_expected_prev[21] )
		&& ((Instruction_MEM_WB_expected_prev[21] !== last_Instruction_MEM_WB_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[21] = Instruction_MEM_WB_expected_prev[21];
	end
	if (
		( Instruction_MEM_WB_expected_prev[22] !== 1'bx ) && ( Instruction_MEM_WB_prev[22] !== Instruction_MEM_WB_expected_prev[22] )
		&& ((Instruction_MEM_WB_expected_prev[22] !== last_Instruction_MEM_WB_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[22] = Instruction_MEM_WB_expected_prev[22];
	end
	if (
		( Instruction_MEM_WB_expected_prev[23] !== 1'bx ) && ( Instruction_MEM_WB_prev[23] !== Instruction_MEM_WB_expected_prev[23] )
		&& ((Instruction_MEM_WB_expected_prev[23] !== last_Instruction_MEM_WB_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[23] = Instruction_MEM_WB_expected_prev[23];
	end
	if (
		( Instruction_MEM_WB_expected_prev[24] !== 1'bx ) && ( Instruction_MEM_WB_prev[24] !== Instruction_MEM_WB_expected_prev[24] )
		&& ((Instruction_MEM_WB_expected_prev[24] !== last_Instruction_MEM_WB_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[24] = Instruction_MEM_WB_expected_prev[24];
	end
	if (
		( Instruction_MEM_WB_expected_prev[25] !== 1'bx ) && ( Instruction_MEM_WB_prev[25] !== Instruction_MEM_WB_expected_prev[25] )
		&& ((Instruction_MEM_WB_expected_prev[25] !== last_Instruction_MEM_WB_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[25] = Instruction_MEM_WB_expected_prev[25];
	end
	if (
		( Instruction_MEM_WB_expected_prev[26] !== 1'bx ) && ( Instruction_MEM_WB_prev[26] !== Instruction_MEM_WB_expected_prev[26] )
		&& ((Instruction_MEM_WB_expected_prev[26] !== last_Instruction_MEM_WB_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[26] = Instruction_MEM_WB_expected_prev[26];
	end
	if (
		( Instruction_MEM_WB_expected_prev[27] !== 1'bx ) && ( Instruction_MEM_WB_prev[27] !== Instruction_MEM_WB_expected_prev[27] )
		&& ((Instruction_MEM_WB_expected_prev[27] !== last_Instruction_MEM_WB_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[27] = Instruction_MEM_WB_expected_prev[27];
	end
	if (
		( Instruction_MEM_WB_expected_prev[28] !== 1'bx ) && ( Instruction_MEM_WB_prev[28] !== Instruction_MEM_WB_expected_prev[28] )
		&& ((Instruction_MEM_WB_expected_prev[28] !== last_Instruction_MEM_WB_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[28] = Instruction_MEM_WB_expected_prev[28];
	end
	if (
		( Instruction_MEM_WB_expected_prev[29] !== 1'bx ) && ( Instruction_MEM_WB_prev[29] !== Instruction_MEM_WB_expected_prev[29] )
		&& ((Instruction_MEM_WB_expected_prev[29] !== last_Instruction_MEM_WB_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[29] = Instruction_MEM_WB_expected_prev[29];
	end
	if (
		( Instruction_MEM_WB_expected_prev[30] !== 1'bx ) && ( Instruction_MEM_WB_prev[30] !== Instruction_MEM_WB_expected_prev[30] )
		&& ((Instruction_MEM_WB_expected_prev[30] !== last_Instruction_MEM_WB_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[30] = Instruction_MEM_WB_expected_prev[30];
	end
	if (
		( Instruction_MEM_WB_expected_prev[31] !== 1'bx ) && ( Instruction_MEM_WB_prev[31] !== Instruction_MEM_WB_expected_prev[31] )
		&& ((Instruction_MEM_WB_expected_prev[31] !== last_Instruction_MEM_WB_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_MEM_WB[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_MEM_WB_expected_prev);
		$display ("     Real value = %b", Instruction_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Instruction_MEM_WB_exp[31] = Instruction_MEM_WB_expected_prev[31];
	end
	if (
		( PC_WRITE_expected_prev !== 1'bx ) && ( PC_WRITE_prev !== PC_WRITE_expected_prev )
		&& ((PC_WRITE_expected_prev !== last_PC_WRITE_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_WRITE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_WRITE_expected_prev);
		$display ("     Real value = %b", PC_WRITE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PC_WRITE_exp = PC_WRITE_expected_prev;
	end
	if (
		( RD_EX_MEM_expected_prev[0] !== 1'bx ) && ( RD_EX_MEM_prev[0] !== RD_EX_MEM_expected_prev[0] )
		&& ((RD_EX_MEM_expected_prev[0] !== last_RD_EX_MEM_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD_EX_MEM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_EX_MEM_expected_prev);
		$display ("     Real value = %b", RD_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD_EX_MEM_exp[0] = RD_EX_MEM_expected_prev[0];
	end
	if (
		( RD_EX_MEM_expected_prev[1] !== 1'bx ) && ( RD_EX_MEM_prev[1] !== RD_EX_MEM_expected_prev[1] )
		&& ((RD_EX_MEM_expected_prev[1] !== last_RD_EX_MEM_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD_EX_MEM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_EX_MEM_expected_prev);
		$display ("     Real value = %b", RD_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD_EX_MEM_exp[1] = RD_EX_MEM_expected_prev[1];
	end
	if (
		( RD_EX_MEM_expected_prev[2] !== 1'bx ) && ( RD_EX_MEM_prev[2] !== RD_EX_MEM_expected_prev[2] )
		&& ((RD_EX_MEM_expected_prev[2] !== last_RD_EX_MEM_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD_EX_MEM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_EX_MEM_expected_prev);
		$display ("     Real value = %b", RD_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD_EX_MEM_exp[2] = RD_EX_MEM_expected_prev[2];
	end
	if (
		( RD_EX_MEM_expected_prev[3] !== 1'bx ) && ( RD_EX_MEM_prev[3] !== RD_EX_MEM_expected_prev[3] )
		&& ((RD_EX_MEM_expected_prev[3] !== last_RD_EX_MEM_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD_EX_MEM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_EX_MEM_expected_prev);
		$display ("     Real value = %b", RD_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD_EX_MEM_exp[3] = RD_EX_MEM_expected_prev[3];
	end
	if (
		( RD_EX_MEM_expected_prev[4] !== 1'bx ) && ( RD_EX_MEM_prev[4] !== RD_EX_MEM_expected_prev[4] )
		&& ((RD_EX_MEM_expected_prev[4] !== last_RD_EX_MEM_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD_EX_MEM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_EX_MEM_expected_prev);
		$display ("     Real value = %b", RD_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RD_EX_MEM_exp[4] = RD_EX_MEM_expected_prev[4];
	end
	if (
		( RD_MEM_WB_expected_prev[0] !== 1'bx ) && ( RD_MEM_WB_prev[0] !== RD_MEM_WB_expected_prev[0] )
		&& ((RD_MEM_WB_expected_prev[0] !== last_RD_MEM_WB_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD_MEM_WB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_MEM_WB_expected_prev);
		$display ("     Real value = %b", RD_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RD_MEM_WB_exp[0] = RD_MEM_WB_expected_prev[0];
	end
	if (
		( RD_MEM_WB_expected_prev[1] !== 1'bx ) && ( RD_MEM_WB_prev[1] !== RD_MEM_WB_expected_prev[1] )
		&& ((RD_MEM_WB_expected_prev[1] !== last_RD_MEM_WB_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD_MEM_WB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_MEM_WB_expected_prev);
		$display ("     Real value = %b", RD_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RD_MEM_WB_exp[1] = RD_MEM_WB_expected_prev[1];
	end
	if (
		( RD_MEM_WB_expected_prev[2] !== 1'bx ) && ( RD_MEM_WB_prev[2] !== RD_MEM_WB_expected_prev[2] )
		&& ((RD_MEM_WB_expected_prev[2] !== last_RD_MEM_WB_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD_MEM_WB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_MEM_WB_expected_prev);
		$display ("     Real value = %b", RD_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RD_MEM_WB_exp[2] = RD_MEM_WB_expected_prev[2];
	end
	if (
		( RD_MEM_WB_expected_prev[3] !== 1'bx ) && ( RD_MEM_WB_prev[3] !== RD_MEM_WB_expected_prev[3] )
		&& ((RD_MEM_WB_expected_prev[3] !== last_RD_MEM_WB_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD_MEM_WB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_MEM_WB_expected_prev);
		$display ("     Real value = %b", RD_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RD_MEM_WB_exp[3] = RD_MEM_WB_expected_prev[3];
	end
	if (
		( RD_MEM_WB_expected_prev[4] !== 1'bx ) && ( RD_MEM_WB_prev[4] !== RD_MEM_WB_expected_prev[4] )
		&& ((RD_MEM_WB_expected_prev[4] !== last_RD_MEM_WB_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD_MEM_WB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_MEM_WB_expected_prev);
		$display ("     Real value = %b", RD_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RD_MEM_WB_exp[4] = RD_MEM_WB_expected_prev[4];
	end
	if (
		( REG_WRITE_EX_MEM_expected_prev !== 1'bx ) && ( REG_WRITE_EX_MEM_prev !== REG_WRITE_EX_MEM_expected_prev )
		&& ((REG_WRITE_EX_MEM_expected_prev !== last_REG_WRITE_EX_MEM_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_WRITE_EX_MEM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_WRITE_EX_MEM_expected_prev);
		$display ("     Real value = %b", REG_WRITE_EX_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_REG_WRITE_EX_MEM_exp = REG_WRITE_EX_MEM_expected_prev;
	end
	if (
		( REG_WRITE_MEM_WB_expected_prev !== 1'bx ) && ( REG_WRITE_MEM_WB_prev !== REG_WRITE_MEM_WB_expected_prev )
		&& ((REG_WRITE_MEM_WB_expected_prev !== last_REG_WRITE_MEM_WB_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_WRITE_MEM_WB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_WRITE_MEM_WB_expected_prev);
		$display ("     Real value = %b", REG_WRITE_MEM_WB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_REG_WRITE_MEM_WB_exp = REG_WRITE_MEM_WB_expected_prev;
	end
	if (
		( RS_ID_EX_expected_prev[0] !== 1'bx ) && ( RS_ID_EX_prev[0] !== RS_ID_EX_expected_prev[0] )
		&& ((RS_ID_EX_expected_prev[0] !== last_RS_ID_EX_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_ID_EX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_ID_EX_expected_prev);
		$display ("     Real value = %b", RS_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RS_ID_EX_exp[0] = RS_ID_EX_expected_prev[0];
	end
	if (
		( RS_ID_EX_expected_prev[1] !== 1'bx ) && ( RS_ID_EX_prev[1] !== RS_ID_EX_expected_prev[1] )
		&& ((RS_ID_EX_expected_prev[1] !== last_RS_ID_EX_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_ID_EX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_ID_EX_expected_prev);
		$display ("     Real value = %b", RS_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RS_ID_EX_exp[1] = RS_ID_EX_expected_prev[1];
	end
	if (
		( RS_ID_EX_expected_prev[2] !== 1'bx ) && ( RS_ID_EX_prev[2] !== RS_ID_EX_expected_prev[2] )
		&& ((RS_ID_EX_expected_prev[2] !== last_RS_ID_EX_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_ID_EX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_ID_EX_expected_prev);
		$display ("     Real value = %b", RS_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RS_ID_EX_exp[2] = RS_ID_EX_expected_prev[2];
	end
	if (
		( RS_ID_EX_expected_prev[3] !== 1'bx ) && ( RS_ID_EX_prev[3] !== RS_ID_EX_expected_prev[3] )
		&& ((RS_ID_EX_expected_prev[3] !== last_RS_ID_EX_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_ID_EX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_ID_EX_expected_prev);
		$display ("     Real value = %b", RS_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RS_ID_EX_exp[3] = RS_ID_EX_expected_prev[3];
	end
	if (
		( RS_ID_EX_expected_prev[4] !== 1'bx ) && ( RS_ID_EX_prev[4] !== RS_ID_EX_expected_prev[4] )
		&& ((RS_ID_EX_expected_prev[4] !== last_RS_ID_EX_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_ID_EX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_ID_EX_expected_prev);
		$display ("     Real value = %b", RS_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RS_ID_EX_exp[4] = RS_ID_EX_expected_prev[4];
	end
	if (
		( RT_ID_EX_expected_prev[0] !== 1'bx ) && ( RT_ID_EX_prev[0] !== RT_ID_EX_expected_prev[0] )
		&& ((RT_ID_EX_expected_prev[0] !== last_RT_ID_EX_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RT_ID_EX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RT_ID_EX_expected_prev);
		$display ("     Real value = %b", RT_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RT_ID_EX_exp[0] = RT_ID_EX_expected_prev[0];
	end
	if (
		( RT_ID_EX_expected_prev[1] !== 1'bx ) && ( RT_ID_EX_prev[1] !== RT_ID_EX_expected_prev[1] )
		&& ((RT_ID_EX_expected_prev[1] !== last_RT_ID_EX_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RT_ID_EX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RT_ID_EX_expected_prev);
		$display ("     Real value = %b", RT_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RT_ID_EX_exp[1] = RT_ID_EX_expected_prev[1];
	end
	if (
		( RT_ID_EX_expected_prev[2] !== 1'bx ) && ( RT_ID_EX_prev[2] !== RT_ID_EX_expected_prev[2] )
		&& ((RT_ID_EX_expected_prev[2] !== last_RT_ID_EX_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RT_ID_EX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RT_ID_EX_expected_prev);
		$display ("     Real value = %b", RT_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RT_ID_EX_exp[2] = RT_ID_EX_expected_prev[2];
	end
	if (
		( RT_ID_EX_expected_prev[3] !== 1'bx ) && ( RT_ID_EX_prev[3] !== RT_ID_EX_expected_prev[3] )
		&& ((RT_ID_EX_expected_prev[3] !== last_RT_ID_EX_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RT_ID_EX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RT_ID_EX_expected_prev);
		$display ("     Real value = %b", RT_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RT_ID_EX_exp[3] = RT_ID_EX_expected_prev[3];
	end
	if (
		( RT_ID_EX_expected_prev[4] !== 1'bx ) && ( RT_ID_EX_prev[4] !== RT_ID_EX_expected_prev[4] )
		&& ((RT_ID_EX_expected_prev[4] !== last_RT_ID_EX_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RT_ID_EX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RT_ID_EX_expected_prev);
		$display ("     Real value = %b", RT_ID_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RT_ID_EX_exp[4] = RT_ID_EX_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#15000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Processor_MIPS_with_Pipelines_diagram_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [7:0] PC_PLUS_1;
reg Reset_bar;
// wires                                               
wire [7:0] ALU_res;
wire [7:0] data_memory;
wire [7:0] entree_ALU_1;
wire [7:0] entree_ALU_2;
wire [1:0] Forward_A;
wire [1:0] Forward_B;
wire IF_ID_WRITE;
wire [31:0] Instruction_EX_MEM;
wire [31:0] Instruction_ID_EX;
wire [31:0] Instruction_IF_ID;
wire [31:0] Instruction_MEM_WB;
wire PC_WRITE;
wire [4:0] RD_EX_MEM;
wire [4:0] RD_MEM_WB;
wire REG_WRITE_EX_MEM;
wire REG_WRITE_MEM_WB;
wire [4:0] RS_ID_EX;
wire [4:0] RT_ID_EX;

wire sampler;                             

// assign statements (if any)                          
Processor_MIPS_with_Pipelines_diagram i1 (
// port map - connection between master ports and signals/registers   
	.ALU_res(ALU_res),
	.Clock(Clock),
	.data_memory(data_memory),
	.entree_ALU_1(entree_ALU_1),
	.entree_ALU_2(entree_ALU_2),
	.Forward_A(Forward_A),
	.Forward_B(Forward_B),
	.IF_ID_WRITE(IF_ID_WRITE),
	.Instruction_EX_MEM(Instruction_EX_MEM),
	.Instruction_ID_EX(Instruction_ID_EX),
	.Instruction_IF_ID(Instruction_IF_ID),
	.Instruction_MEM_WB(Instruction_MEM_WB),
	.PC_PLUS_1(PC_PLUS_1),
	.PC_WRITE(PC_WRITE),
	.RD_EX_MEM(RD_EX_MEM),
	.RD_MEM_WB(RD_MEM_WB),
	.REG_WRITE_EX_MEM(REG_WRITE_EX_MEM),
	.REG_WRITE_MEM_WB(REG_WRITE_MEM_WB),
	.Reset_bar(Reset_bar),
	.RS_ID_EX(RS_ID_EX),
	.RT_ID_EX(RT_ID_EX)
);

// Clock
always
begin
	Clock = 1'b0;
	Clock = #300000 1'b1;
	#300000;
end 

// Reset_bar
initial
begin
	Reset_bar = 1'b0;
	Reset_bar = #800000 1'b1;
end 
// PC_PLUS_1[ 7 ]
initial
begin
	PC_PLUS_1[7] = 1'b0;
end 
// PC_PLUS_1[ 6 ]
initial
begin
	PC_PLUS_1[6] = 1'b0;
end 
// PC_PLUS_1[ 5 ]
initial
begin
	PC_PLUS_1[5] = 1'b0;
end 
// PC_PLUS_1[ 4 ]
initial
begin
	PC_PLUS_1[4] = 1'b0;
end 
// PC_PLUS_1[ 3 ]
initial
begin
	PC_PLUS_1[3] = 1'b0;
end 
// PC_PLUS_1[ 2 ]
initial
begin
	PC_PLUS_1[2] = 1'b0;
end 
// PC_PLUS_1[ 1 ]
initial
begin
	PC_PLUS_1[1] = 1'b0;
end 
// PC_PLUS_1[ 0 ]
initial
begin
	PC_PLUS_1[0] = 1'b0;
	PC_PLUS_1[0] = #1440000 1'b1;
end 

Processor_MIPS_with_Pipelines_diagram_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.PC_PLUS_1(PC_PLUS_1),
	.Reset_bar(Reset_bar),
	.sampler_tx(sampler)
);

Processor_MIPS_with_Pipelines_diagram_vlg_check_tst tb_out(
	.ALU_res(ALU_res),
	.data_memory(data_memory),
	.entree_ALU_1(entree_ALU_1),
	.entree_ALU_2(entree_ALU_2),
	.Forward_A(Forward_A),
	.Forward_B(Forward_B),
	.IF_ID_WRITE(IF_ID_WRITE),
	.Instruction_EX_MEM(Instruction_EX_MEM),
	.Instruction_ID_EX(Instruction_ID_EX),
	.Instruction_IF_ID(Instruction_IF_ID),
	.Instruction_MEM_WB(Instruction_MEM_WB),
	.PC_WRITE(PC_WRITE),
	.RD_EX_MEM(RD_EX_MEM),
	.RD_MEM_WB(RD_MEM_WB),
	.REG_WRITE_EX_MEM(REG_WRITE_EX_MEM),
	.REG_WRITE_MEM_WB(REG_WRITE_MEM_WB),
	.RS_ID_EX(RS_ID_EX),
	.RT_ID_EX(RT_ID_EX),
	.sampler_rx(sampler)
);
endmodule

