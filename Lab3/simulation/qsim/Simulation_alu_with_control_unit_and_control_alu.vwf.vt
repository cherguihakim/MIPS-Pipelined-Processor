// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/07/2024 22:43:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TEST_CONTROL_ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TEST_CONTROL_ALU_vlg_sample_tst(
	code_fonction,
	data_one,
	data_two,
	opcode,
	sampler_tx
);
input [5:0] code_fonction;
input [7:0] data_one;
input [7:0] data_two;
input [5:0] opcode;
output sampler_tx;

reg sample;
time current_time;
always @(code_fonction or data_one or data_two or opcode)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TEST_CONTROL_ALU_vlg_check_tst (
	alu_resultat,
	test_alu_op,
	test_selecteur,
	ZERO,
	sampler_rx
);
input [7:0] alu_resultat;
input [1:0] test_alu_op;
input [2:0] test_selecteur;
input  ZERO;
input sampler_rx;

reg [7:0] alu_resultat_expected;
reg [1:0] test_alu_op_expected;
reg [2:0] test_selecteur_expected;
reg  ZERO_expected;

reg [7:0] alu_resultat_prev;
reg [1:0] test_alu_op_prev;
reg [2:0] test_selecteur_prev;
reg  ZERO_prev;

reg [7:0] alu_resultat_expected_prev;
reg [1:0] test_alu_op_expected_prev;
reg [2:0] test_selecteur_expected_prev;
reg  ZERO_expected_prev;

reg [7:0] last_alu_resultat_exp;
reg [1:0] last_test_alu_op_exp;
reg [2:0] last_test_selecteur_exp;
reg  last_ZERO_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	alu_resultat_prev = alu_resultat;
	test_alu_op_prev = test_alu_op;
	test_selecteur_prev = test_selecteur;
	ZERO_prev = ZERO;
end

// update expected /o prevs

always @(trigger)
begin
	alu_resultat_expected_prev = alu_resultat_expected;
	test_alu_op_expected_prev = test_alu_op_expected;
	test_selecteur_expected_prev = test_selecteur_expected;
	ZERO_expected_prev = ZERO_expected;
end


// expected test_alu_op[ 1 ]
initial
begin
	test_alu_op_expected[1] = 1'bX;
end 
// expected test_alu_op[ 0 ]
initial
begin
	test_alu_op_expected[0] = 1'bX;
end 
// expected test_selecteur[ 2 ]
initial
begin
	test_selecteur_expected[2] = 1'bX;
end 
// expected test_selecteur[ 1 ]
initial
begin
	test_selecteur_expected[1] = 1'bX;
end 
// expected test_selecteur[ 0 ]
initial
begin
	test_selecteur_expected[0] = 1'bX;
end 

// expected ZERO
initial
begin
	ZERO_expected = 1'bX;
end 
// expected alu_resultat[ 7 ]
initial
begin
	alu_resultat_expected[7] = 1'bX;
end 
// expected alu_resultat[ 6 ]
initial
begin
	alu_resultat_expected[6] = 1'bX;
end 
// expected alu_resultat[ 5 ]
initial
begin
	alu_resultat_expected[5] = 1'bX;
end 
// expected alu_resultat[ 4 ]
initial
begin
	alu_resultat_expected[4] = 1'bX;
end 
// expected alu_resultat[ 3 ]
initial
begin
	alu_resultat_expected[3] = 1'bX;
end 
// expected alu_resultat[ 2 ]
initial
begin
	alu_resultat_expected[2] = 1'bX;
end 
// expected alu_resultat[ 1 ]
initial
begin
	alu_resultat_expected[1] = 1'bX;
end 
// expected alu_resultat[ 0 ]
initial
begin
	alu_resultat_expected[0] = 1'bX;
end 
// generate trigger
always @(alu_resultat_expected or alu_resultat or test_alu_op_expected or test_alu_op or test_selecteur_expected or test_selecteur or ZERO_expected or ZERO)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alu_resultat = %b | expected test_alu_op = %b | expected test_selecteur = %b | expected ZERO = %b | ",alu_resultat_expected_prev,test_alu_op_expected_prev,test_selecteur_expected_prev,ZERO_expected_prev);
	$display("| real alu_resultat = %b | real test_alu_op = %b | real test_selecteur = %b | real ZERO = %b | ",alu_resultat_prev,test_alu_op_prev,test_selecteur_prev,ZERO_prev);
`endif
	if (
		( alu_resultat_expected_prev[0] !== 1'bx ) && ( alu_resultat_prev[0] !== alu_resultat_expected_prev[0] )
		&& ((alu_resultat_expected_prev[0] !== last_alu_resultat_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_resultat[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_resultat_expected_prev);
		$display ("     Real value = %b", alu_resultat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_resultat_exp[0] = alu_resultat_expected_prev[0];
	end
	if (
		( alu_resultat_expected_prev[1] !== 1'bx ) && ( alu_resultat_prev[1] !== alu_resultat_expected_prev[1] )
		&& ((alu_resultat_expected_prev[1] !== last_alu_resultat_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_resultat[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_resultat_expected_prev);
		$display ("     Real value = %b", alu_resultat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_resultat_exp[1] = alu_resultat_expected_prev[1];
	end
	if (
		( alu_resultat_expected_prev[2] !== 1'bx ) && ( alu_resultat_prev[2] !== alu_resultat_expected_prev[2] )
		&& ((alu_resultat_expected_prev[2] !== last_alu_resultat_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_resultat[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_resultat_expected_prev);
		$display ("     Real value = %b", alu_resultat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_resultat_exp[2] = alu_resultat_expected_prev[2];
	end
	if (
		( alu_resultat_expected_prev[3] !== 1'bx ) && ( alu_resultat_prev[3] !== alu_resultat_expected_prev[3] )
		&& ((alu_resultat_expected_prev[3] !== last_alu_resultat_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_resultat[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_resultat_expected_prev);
		$display ("     Real value = %b", alu_resultat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_resultat_exp[3] = alu_resultat_expected_prev[3];
	end
	if (
		( alu_resultat_expected_prev[4] !== 1'bx ) && ( alu_resultat_prev[4] !== alu_resultat_expected_prev[4] )
		&& ((alu_resultat_expected_prev[4] !== last_alu_resultat_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_resultat[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_resultat_expected_prev);
		$display ("     Real value = %b", alu_resultat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_resultat_exp[4] = alu_resultat_expected_prev[4];
	end
	if (
		( alu_resultat_expected_prev[5] !== 1'bx ) && ( alu_resultat_prev[5] !== alu_resultat_expected_prev[5] )
		&& ((alu_resultat_expected_prev[5] !== last_alu_resultat_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_resultat[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_resultat_expected_prev);
		$display ("     Real value = %b", alu_resultat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_resultat_exp[5] = alu_resultat_expected_prev[5];
	end
	if (
		( alu_resultat_expected_prev[6] !== 1'bx ) && ( alu_resultat_prev[6] !== alu_resultat_expected_prev[6] )
		&& ((alu_resultat_expected_prev[6] !== last_alu_resultat_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_resultat[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_resultat_expected_prev);
		$display ("     Real value = %b", alu_resultat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_resultat_exp[6] = alu_resultat_expected_prev[6];
	end
	if (
		( alu_resultat_expected_prev[7] !== 1'bx ) && ( alu_resultat_prev[7] !== alu_resultat_expected_prev[7] )
		&& ((alu_resultat_expected_prev[7] !== last_alu_resultat_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_resultat[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_resultat_expected_prev);
		$display ("     Real value = %b", alu_resultat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_resultat_exp[7] = alu_resultat_expected_prev[7];
	end
	if (
		( test_alu_op_expected_prev[0] !== 1'bx ) && ( test_alu_op_prev[0] !== test_alu_op_expected_prev[0] )
		&& ((test_alu_op_expected_prev[0] !== last_test_alu_op_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test_alu_op[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_alu_op_expected_prev);
		$display ("     Real value = %b", test_alu_op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_test_alu_op_exp[0] = test_alu_op_expected_prev[0];
	end
	if (
		( test_alu_op_expected_prev[1] !== 1'bx ) && ( test_alu_op_prev[1] !== test_alu_op_expected_prev[1] )
		&& ((test_alu_op_expected_prev[1] !== last_test_alu_op_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test_alu_op[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_alu_op_expected_prev);
		$display ("     Real value = %b", test_alu_op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_test_alu_op_exp[1] = test_alu_op_expected_prev[1];
	end
	if (
		( test_selecteur_expected_prev[0] !== 1'bx ) && ( test_selecteur_prev[0] !== test_selecteur_expected_prev[0] )
		&& ((test_selecteur_expected_prev[0] !== last_test_selecteur_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test_selecteur[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_selecteur_expected_prev);
		$display ("     Real value = %b", test_selecteur_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test_selecteur_exp[0] = test_selecteur_expected_prev[0];
	end
	if (
		( test_selecteur_expected_prev[1] !== 1'bx ) && ( test_selecteur_prev[1] !== test_selecteur_expected_prev[1] )
		&& ((test_selecteur_expected_prev[1] !== last_test_selecteur_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test_selecteur[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_selecteur_expected_prev);
		$display ("     Real value = %b", test_selecteur_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test_selecteur_exp[1] = test_selecteur_expected_prev[1];
	end
	if (
		( test_selecteur_expected_prev[2] !== 1'bx ) && ( test_selecteur_prev[2] !== test_selecteur_expected_prev[2] )
		&& ((test_selecteur_expected_prev[2] !== last_test_selecteur_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test_selecteur[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_selecteur_expected_prev);
		$display ("     Real value = %b", test_selecteur_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test_selecteur_exp[2] = test_selecteur_expected_prev[2];
	end
	if (
		( ZERO_expected_prev !== 1'bx ) && ( ZERO_prev !== ZERO_expected_prev )
		&& ((ZERO_expected_prev !== last_ZERO_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ZERO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ZERO_expected_prev);
		$display ("     Real value = %b", ZERO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ZERO_exp = ZERO_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TEST_CONTROL_ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] code_fonction;
reg [7:0] data_one;
reg [7:0] data_two;
reg [5:0] opcode;
// wires                                               
wire [7:0] alu_resultat;
wire [1:0] test_alu_op;
wire [2:0] test_selecteur;
wire ZERO;

wire sampler;                             

// assign statements (if any)                          
TEST_CONTROL_ALU i1 (
// port map - connection between master ports and signals/registers   
	.alu_resultat(alu_resultat),
	.code_fonction(code_fonction),
	.data_one(data_one),
	.data_two(data_two),
	.opcode(opcode),
	.test_alu_op(test_alu_op),
	.test_selecteur(test_selecteur),
	.ZERO(ZERO)
);
// opcode[ 5 ]
initial
begin
	opcode[5] = 1'b0;
end 
// opcode[ 4 ]
initial
begin
	opcode[4] = 1'b0;
end 
// opcode[ 3 ]
initial
begin
	opcode[3] = 1'b0;
end 
// opcode[ 2 ]
initial
begin
	opcode[2] = 1'b1;
end 
// opcode[ 1 ]
initial
begin
	opcode[1] = 1'b0;
end 
// opcode[ 0 ]
initial
begin
	opcode[0] = 1'b0;
end 
// code_fonction[ 5 ]
initial
begin
	code_fonction[5] = 1'b0;
end 
// code_fonction[ 4 ]
initial
begin
	code_fonction[4] = 1'b0;
end 
// code_fonction[ 3 ]
initial
begin
	code_fonction[3] = 1'b1;
end 
// code_fonction[ 2 ]
initial
begin
	code_fonction[2] = 1'b0;
end 
// code_fonction[ 1 ]
initial
begin
	code_fonction[1] = 1'b0;
end 
// code_fonction[ 0 ]
initial
begin
	code_fonction[0] = 1'b0;
end 
// data_one[ 7 ]
initial
begin
	data_one[7] = 1'b0;
end 
// data_one[ 6 ]
initial
begin
	data_one[6] = 1'b0;
end 
// data_one[ 5 ]
initial
begin
	data_one[5] = 1'b1;
end 
// data_one[ 4 ]
initial
begin
	data_one[4] = 1'b0;
end 
// data_one[ 3 ]
initial
begin
	data_one[3] = 1'b1;
end 
// data_one[ 2 ]
initial
begin
	data_one[2] = 1'b1;
end 
// data_one[ 1 ]
initial
begin
	data_one[1] = 1'b1;
end 
// data_one[ 0 ]
initial
begin
	data_one[0] = 1'b0;
end 
// data_two[ 7 ]
initial
begin
	data_two[7] = 1'b0;
end 
// data_two[ 6 ]
initial
begin
	data_two[6] = 1'b0;
end 
// data_two[ 5 ]
initial
begin
	data_two[5] = 1'b1;
end 
// data_two[ 4 ]
initial
begin
	data_two[4] = 1'b0;
end 
// data_two[ 3 ]
initial
begin
	data_two[3] = 1'b1;
end 
// data_two[ 2 ]
initial
begin
	data_two[2] = 1'b1;
end 
// data_two[ 1 ]
initial
begin
	data_two[1] = 1'b1;
end 
// data_two[ 0 ]
initial
begin
	data_two[0] = 1'b0;
end 

TEST_CONTROL_ALU_vlg_sample_tst tb_sample (
	.code_fonction(code_fonction),
	.data_one(data_one),
	.data_two(data_two),
	.opcode(opcode),
	.sampler_tx(sampler)
);

TEST_CONTROL_ALU_vlg_check_tst tb_out(
	.alu_resultat(alu_resultat),
	.test_alu_op(test_alu_op),
	.test_selecteur(test_selecteur),
	.ZERO(ZERO),
	.sampler_rx(sampler)
);
endmodule

