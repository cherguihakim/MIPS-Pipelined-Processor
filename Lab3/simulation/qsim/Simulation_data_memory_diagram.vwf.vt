// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/13/2024 12:14:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Data_memory_diagram
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Data_memory_diagram_vlg_sample_tst(
	address,
	clock,
	MemtoRead,
	MemtoWrite,
	Write_data,
	sampler_tx
);
input [7:0] address;
input  clock;
input  MemtoRead;
input  MemtoWrite;
input [7:0] Write_data;
output sampler_tx;

reg sample;
time current_time;
always @(address or clock or MemtoRead or MemtoWrite or Write_data)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Data_memory_diagram_vlg_check_tst (
	Read_data,
	sampler_rx
);
input [7:0] Read_data;
input sampler_rx;

reg [7:0] Read_data_expected;

reg [7:0] Read_data_prev;

reg [7:0] Read_data_expected_prev;

reg [7:0] last_Read_data_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	Read_data_prev = Read_data;
end

// update expected /o prevs

always @(trigger)
begin
	Read_data_expected_prev = Read_data_expected;
end


// expected Read_data[ 7 ]
initial
begin
	Read_data_expected[7] = 1'bX;
end 
// expected Read_data[ 6 ]
initial
begin
	Read_data_expected[6] = 1'bX;
end 
// expected Read_data[ 5 ]
initial
begin
	Read_data_expected[5] = 1'bX;
end 
// expected Read_data[ 4 ]
initial
begin
	Read_data_expected[4] = 1'bX;
end 
// expected Read_data[ 3 ]
initial
begin
	Read_data_expected[3] = 1'bX;
end 
// expected Read_data[ 2 ]
initial
begin
	Read_data_expected[2] = 1'bX;
end 
// expected Read_data[ 1 ]
initial
begin
	Read_data_expected[1] = 1'bX;
end 
// expected Read_data[ 0 ]
initial
begin
	Read_data_expected[0] = 1'bX;
end 
// generate trigger
always @(Read_data_expected or Read_data)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Read_data = %b | ",Read_data_expected_prev);
	$display("| real Read_data = %b | ",Read_data_prev);
`endif
	if (
		( Read_data_expected_prev[0] !== 1'bx ) && ( Read_data_prev[0] !== Read_data_expected_prev[0] )
		&& ((Read_data_expected_prev[0] !== last_Read_data_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_expected_prev);
		$display ("     Real value = %b", Read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Read_data_exp[0] = Read_data_expected_prev[0];
	end
	if (
		( Read_data_expected_prev[1] !== 1'bx ) && ( Read_data_prev[1] !== Read_data_expected_prev[1] )
		&& ((Read_data_expected_prev[1] !== last_Read_data_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_expected_prev);
		$display ("     Real value = %b", Read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Read_data_exp[1] = Read_data_expected_prev[1];
	end
	if (
		( Read_data_expected_prev[2] !== 1'bx ) && ( Read_data_prev[2] !== Read_data_expected_prev[2] )
		&& ((Read_data_expected_prev[2] !== last_Read_data_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_expected_prev);
		$display ("     Real value = %b", Read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Read_data_exp[2] = Read_data_expected_prev[2];
	end
	if (
		( Read_data_expected_prev[3] !== 1'bx ) && ( Read_data_prev[3] !== Read_data_expected_prev[3] )
		&& ((Read_data_expected_prev[3] !== last_Read_data_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_expected_prev);
		$display ("     Real value = %b", Read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Read_data_exp[3] = Read_data_expected_prev[3];
	end
	if (
		( Read_data_expected_prev[4] !== 1'bx ) && ( Read_data_prev[4] !== Read_data_expected_prev[4] )
		&& ((Read_data_expected_prev[4] !== last_Read_data_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_expected_prev);
		$display ("     Real value = %b", Read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Read_data_exp[4] = Read_data_expected_prev[4];
	end
	if (
		( Read_data_expected_prev[5] !== 1'bx ) && ( Read_data_prev[5] !== Read_data_expected_prev[5] )
		&& ((Read_data_expected_prev[5] !== last_Read_data_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_expected_prev);
		$display ("     Real value = %b", Read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Read_data_exp[5] = Read_data_expected_prev[5];
	end
	if (
		( Read_data_expected_prev[6] !== 1'bx ) && ( Read_data_prev[6] !== Read_data_expected_prev[6] )
		&& ((Read_data_expected_prev[6] !== last_Read_data_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_expected_prev);
		$display ("     Real value = %b", Read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Read_data_exp[6] = Read_data_expected_prev[6];
	end
	if (
		( Read_data_expected_prev[7] !== 1'bx ) && ( Read_data_prev[7] !== Read_data_expected_prev[7] )
		&& ((Read_data_expected_prev[7] !== last_Read_data_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_expected_prev);
		$display ("     Real value = %b", Read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Read_data_exp[7] = Read_data_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Data_memory_diagram_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] address;
reg clock;
reg MemtoRead;
reg MemtoWrite;
reg [7:0] Write_data;
// wires                                               
wire [7:0] Read_data;

wire sampler;                             

// assign statements (if any)                          
Data_memory_diagram i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.clock(clock),
	.MemtoRead(MemtoRead),
	.MemtoWrite(MemtoWrite),
	.Read_data(Read_data),
	.Write_data(Write_data)
);

// clock
initial
begin
	repeat(14)
	begin
		clock = 1'b0;
		clock = #35000 1'b1;
		# 35000;
	end
	clock = 1'b0;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b0;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b0;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b0;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b1;
	address[0] = #80000 1'b0;
	address[0] = #80000 1'b1;
	address[0] = #70000 1'b0;
end 
// Write_data[ 7 ]
initial
begin
	Write_data[7] = 1'b1;
end 
// Write_data[ 6 ]
initial
begin
	Write_data[6] = 1'b1;
end 
// Write_data[ 5 ]
initial
begin
	Write_data[5] = 1'b1;
end 
// Write_data[ 4 ]
initial
begin
	Write_data[4] = 1'b0;
end 
// Write_data[ 3 ]
initial
begin
	Write_data[3] = 1'b0;
end 
// Write_data[ 2 ]
initial
begin
	Write_data[2] = 1'b1;
end 
// Write_data[ 1 ]
initial
begin
	Write_data[1] = 1'b1;
end 
// Write_data[ 0 ]
initial
begin
	Write_data[0] = 1'b1;
end 

// MemtoRead
initial
begin
	MemtoRead = 1'b0;
	MemtoRead = #30000 1'b1;
	MemtoRead = #40000 1'b0;
	MemtoRead = #30000 1'b1;
	MemtoRead = #230000 1'b0;
end 

// MemtoWrite
initial
begin
	MemtoWrite = 1'b0;
end 

Data_memory_diagram_vlg_sample_tst tb_sample (
	.address(address),
	.clock(clock),
	.MemtoRead(MemtoRead),
	.MemtoWrite(MemtoWrite),
	.Write_data(Write_data),
	.sampler_tx(sampler)
);

Data_memory_diagram_vlg_check_tst tb_out(
	.Read_data(Read_data),
	.sampler_rx(sampler)
);
endmodule

