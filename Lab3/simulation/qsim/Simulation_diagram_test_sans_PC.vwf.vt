// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/12/2024 15:30:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Diagram_test_sans_PC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Diagram_test_sans_PC_vlg_sample_tst(
	Clock,
	Instruction,
	ResetBar,
	sampler_tx
);
input  Clock;
input [31:0] Instruction;
input  ResetBar;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or Instruction or ResetBar)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Diagram_test_sans_PC_vlg_check_tst (
	data_memory,
	Read_data_1,
	Read_data_2,
	Resultat_ALU,
	write_data,
	sampler_rx
);
input [7:0] data_memory;
input [7:0] Read_data_1;
input [7:0] Read_data_2;
input [7:0] Resultat_ALU;
input [7:0] write_data;
input sampler_rx;

reg [7:0] data_memory_expected;
reg [7:0] Read_data_1_expected;
reg [7:0] Read_data_2_expected;
reg [7:0] Resultat_ALU_expected;
reg [7:0] write_data_expected;

reg [7:0] data_memory_prev;
reg [7:0] Read_data_1_prev;
reg [7:0] Read_data_2_prev;
reg [7:0] Resultat_ALU_prev;
reg [7:0] write_data_prev;

reg [7:0] data_memory_expected_prev;
reg [7:0] Read_data_1_expected_prev;
reg [7:0] Read_data_2_expected_prev;
reg [7:0] Resultat_ALU_expected_prev;
reg [7:0] write_data_expected_prev;

reg [7:0] last_data_memory_exp;
reg [7:0] last_Read_data_1_exp;
reg [7:0] last_Read_data_2_exp;
reg [7:0] last_Resultat_ALU_exp;
reg [7:0] last_write_data_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	data_memory_prev = data_memory;
	Read_data_1_prev = Read_data_1;
	Read_data_2_prev = Read_data_2;
	Resultat_ALU_prev = Resultat_ALU;
	write_data_prev = write_data;
end

// update expected /o prevs

always @(trigger)
begin
	data_memory_expected_prev = data_memory_expected;
	Read_data_1_expected_prev = Read_data_1_expected;
	Read_data_2_expected_prev = Read_data_2_expected;
	Resultat_ALU_expected_prev = Resultat_ALU_expected;
	write_data_expected_prev = write_data_expected;
end


// expected Read_data_1[ 7 ]
initial
begin
	Read_data_1_expected[7] = 1'bX;
end 
// expected Read_data_1[ 6 ]
initial
begin
	Read_data_1_expected[6] = 1'bX;
end 
// expected Read_data_1[ 5 ]
initial
begin
	Read_data_1_expected[5] = 1'bX;
end 
// expected Read_data_1[ 4 ]
initial
begin
	Read_data_1_expected[4] = 1'bX;
end 
// expected Read_data_1[ 3 ]
initial
begin
	Read_data_1_expected[3] = 1'bX;
end 
// expected Read_data_1[ 2 ]
initial
begin
	Read_data_1_expected[2] = 1'bX;
end 
// expected Read_data_1[ 1 ]
initial
begin
	Read_data_1_expected[1] = 1'bX;
end 
// expected Read_data_1[ 0 ]
initial
begin
	Read_data_1_expected[0] = 1'bX;
end 
// expected Read_data_2[ 7 ]
initial
begin
	Read_data_2_expected[7] = 1'bX;
end 
// expected Read_data_2[ 6 ]
initial
begin
	Read_data_2_expected[6] = 1'bX;
end 
// expected Read_data_2[ 5 ]
initial
begin
	Read_data_2_expected[5] = 1'bX;
end 
// expected Read_data_2[ 4 ]
initial
begin
	Read_data_2_expected[4] = 1'bX;
end 
// expected Read_data_2[ 3 ]
initial
begin
	Read_data_2_expected[3] = 1'bX;
end 
// expected Read_data_2[ 2 ]
initial
begin
	Read_data_2_expected[2] = 1'bX;
end 
// expected Read_data_2[ 1 ]
initial
begin
	Read_data_2_expected[1] = 1'bX;
end 
// expected Read_data_2[ 0 ]
initial
begin
	Read_data_2_expected[0] = 1'bX;
end 
// expected Resultat_ALU[ 7 ]
initial
begin
	Resultat_ALU_expected[7] = 1'bX;
end 
// expected Resultat_ALU[ 6 ]
initial
begin
	Resultat_ALU_expected[6] = 1'bX;
end 
// expected Resultat_ALU[ 5 ]
initial
begin
	Resultat_ALU_expected[5] = 1'bX;
end 
// expected Resultat_ALU[ 4 ]
initial
begin
	Resultat_ALU_expected[4] = 1'bX;
end 
// expected Resultat_ALU[ 3 ]
initial
begin
	Resultat_ALU_expected[3] = 1'bX;
end 
// expected Resultat_ALU[ 2 ]
initial
begin
	Resultat_ALU_expected[2] = 1'bX;
end 
// expected Resultat_ALU[ 1 ]
initial
begin
	Resultat_ALU_expected[1] = 1'bX;
end 
// expected Resultat_ALU[ 0 ]
initial
begin
	Resultat_ALU_expected[0] = 1'bX;
end 
// expected data_memory[ 7 ]
initial
begin
	data_memory_expected[7] = 1'bX;
end 
// expected data_memory[ 6 ]
initial
begin
	data_memory_expected[6] = 1'bX;
end 
// expected data_memory[ 5 ]
initial
begin
	data_memory_expected[5] = 1'bX;
end 
// expected data_memory[ 4 ]
initial
begin
	data_memory_expected[4] = 1'bX;
end 
// expected data_memory[ 3 ]
initial
begin
	data_memory_expected[3] = 1'bX;
end 
// expected data_memory[ 2 ]
initial
begin
	data_memory_expected[2] = 1'bX;
end 
// expected data_memory[ 1 ]
initial
begin
	data_memory_expected[1] = 1'bX;
end 
// expected data_memory[ 0 ]
initial
begin
	data_memory_expected[0] = 1'bX;
end 
// expected write_data[ 7 ]
initial
begin
	write_data_expected[7] = 1'bX;
end 
// expected write_data[ 6 ]
initial
begin
	write_data_expected[6] = 1'bX;
end 
// expected write_data[ 5 ]
initial
begin
	write_data_expected[5] = 1'bX;
end 
// expected write_data[ 4 ]
initial
begin
	write_data_expected[4] = 1'bX;
end 
// expected write_data[ 3 ]
initial
begin
	write_data_expected[3] = 1'bX;
end 
// expected write_data[ 2 ]
initial
begin
	write_data_expected[2] = 1'bX;
end 
// expected write_data[ 1 ]
initial
begin
	write_data_expected[1] = 1'bX;
end 
// expected write_data[ 0 ]
initial
begin
	write_data_expected[0] = 1'bX;
end 
// generate trigger
always @(data_memory_expected or data_memory or Read_data_1_expected or Read_data_1 or Read_data_2_expected or Read_data_2 or Resultat_ALU_expected or Resultat_ALU or write_data_expected or write_data)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected data_memory = %b | expected Read_data_1 = %b | expected Read_data_2 = %b | expected Resultat_ALU = %b | expected write_data = %b | ",data_memory_expected_prev,Read_data_1_expected_prev,Read_data_2_expected_prev,Resultat_ALU_expected_prev,write_data_expected_prev);
	$display("| real data_memory = %b | real Read_data_1 = %b | real Read_data_2 = %b | real Resultat_ALU = %b | real write_data = %b | ",data_memory_prev,Read_data_1_prev,Read_data_2_prev,Resultat_ALU_prev,write_data_prev);
`endif
	if (
		( data_memory_expected_prev[0] !== 1'bx ) && ( data_memory_prev[0] !== data_memory_expected_prev[0] )
		&& ((data_memory_expected_prev[0] !== last_data_memory_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_memory[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_memory_expected_prev);
		$display ("     Real value = %b", data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_memory_exp[0] = data_memory_expected_prev[0];
	end
	if (
		( data_memory_expected_prev[1] !== 1'bx ) && ( data_memory_prev[1] !== data_memory_expected_prev[1] )
		&& ((data_memory_expected_prev[1] !== last_data_memory_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_memory[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_memory_expected_prev);
		$display ("     Real value = %b", data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_memory_exp[1] = data_memory_expected_prev[1];
	end
	if (
		( data_memory_expected_prev[2] !== 1'bx ) && ( data_memory_prev[2] !== data_memory_expected_prev[2] )
		&& ((data_memory_expected_prev[2] !== last_data_memory_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_memory[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_memory_expected_prev);
		$display ("     Real value = %b", data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_memory_exp[2] = data_memory_expected_prev[2];
	end
	if (
		( data_memory_expected_prev[3] !== 1'bx ) && ( data_memory_prev[3] !== data_memory_expected_prev[3] )
		&& ((data_memory_expected_prev[3] !== last_data_memory_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_memory[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_memory_expected_prev);
		$display ("     Real value = %b", data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_memory_exp[3] = data_memory_expected_prev[3];
	end
	if (
		( data_memory_expected_prev[4] !== 1'bx ) && ( data_memory_prev[4] !== data_memory_expected_prev[4] )
		&& ((data_memory_expected_prev[4] !== last_data_memory_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_memory[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_memory_expected_prev);
		$display ("     Real value = %b", data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_memory_exp[4] = data_memory_expected_prev[4];
	end
	if (
		( data_memory_expected_prev[5] !== 1'bx ) && ( data_memory_prev[5] !== data_memory_expected_prev[5] )
		&& ((data_memory_expected_prev[5] !== last_data_memory_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_memory[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_memory_expected_prev);
		$display ("     Real value = %b", data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_memory_exp[5] = data_memory_expected_prev[5];
	end
	if (
		( data_memory_expected_prev[6] !== 1'bx ) && ( data_memory_prev[6] !== data_memory_expected_prev[6] )
		&& ((data_memory_expected_prev[6] !== last_data_memory_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_memory[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_memory_expected_prev);
		$display ("     Real value = %b", data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_memory_exp[6] = data_memory_expected_prev[6];
	end
	if (
		( data_memory_expected_prev[7] !== 1'bx ) && ( data_memory_prev[7] !== data_memory_expected_prev[7] )
		&& ((data_memory_expected_prev[7] !== last_data_memory_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_memory[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_memory_expected_prev);
		$display ("     Real value = %b", data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_memory_exp[7] = data_memory_expected_prev[7];
	end
	if (
		( Read_data_1_expected_prev[0] !== 1'bx ) && ( Read_data_1_prev[0] !== Read_data_1_expected_prev[0] )
		&& ((Read_data_1_expected_prev[0] !== last_Read_data_1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_1_expected_prev);
		$display ("     Real value = %b", Read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Read_data_1_exp[0] = Read_data_1_expected_prev[0];
	end
	if (
		( Read_data_1_expected_prev[1] !== 1'bx ) && ( Read_data_1_prev[1] !== Read_data_1_expected_prev[1] )
		&& ((Read_data_1_expected_prev[1] !== last_Read_data_1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_1_expected_prev);
		$display ("     Real value = %b", Read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Read_data_1_exp[1] = Read_data_1_expected_prev[1];
	end
	if (
		( Read_data_1_expected_prev[2] !== 1'bx ) && ( Read_data_1_prev[2] !== Read_data_1_expected_prev[2] )
		&& ((Read_data_1_expected_prev[2] !== last_Read_data_1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_1_expected_prev);
		$display ("     Real value = %b", Read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Read_data_1_exp[2] = Read_data_1_expected_prev[2];
	end
	if (
		( Read_data_1_expected_prev[3] !== 1'bx ) && ( Read_data_1_prev[3] !== Read_data_1_expected_prev[3] )
		&& ((Read_data_1_expected_prev[3] !== last_Read_data_1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_1_expected_prev);
		$display ("     Real value = %b", Read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Read_data_1_exp[3] = Read_data_1_expected_prev[3];
	end
	if (
		( Read_data_1_expected_prev[4] !== 1'bx ) && ( Read_data_1_prev[4] !== Read_data_1_expected_prev[4] )
		&& ((Read_data_1_expected_prev[4] !== last_Read_data_1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_1_expected_prev);
		$display ("     Real value = %b", Read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Read_data_1_exp[4] = Read_data_1_expected_prev[4];
	end
	if (
		( Read_data_1_expected_prev[5] !== 1'bx ) && ( Read_data_1_prev[5] !== Read_data_1_expected_prev[5] )
		&& ((Read_data_1_expected_prev[5] !== last_Read_data_1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_1_expected_prev);
		$display ("     Real value = %b", Read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Read_data_1_exp[5] = Read_data_1_expected_prev[5];
	end
	if (
		( Read_data_1_expected_prev[6] !== 1'bx ) && ( Read_data_1_prev[6] !== Read_data_1_expected_prev[6] )
		&& ((Read_data_1_expected_prev[6] !== last_Read_data_1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_1_expected_prev);
		$display ("     Real value = %b", Read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Read_data_1_exp[6] = Read_data_1_expected_prev[6];
	end
	if (
		( Read_data_1_expected_prev[7] !== 1'bx ) && ( Read_data_1_prev[7] !== Read_data_1_expected_prev[7] )
		&& ((Read_data_1_expected_prev[7] !== last_Read_data_1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data_1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_1_expected_prev);
		$display ("     Real value = %b", Read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Read_data_1_exp[7] = Read_data_1_expected_prev[7];
	end
	if (
		( Read_data_2_expected_prev[0] !== 1'bx ) && ( Read_data_2_prev[0] !== Read_data_2_expected_prev[0] )
		&& ((Read_data_2_expected_prev[0] !== last_Read_data_2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_2_expected_prev);
		$display ("     Real value = %b", Read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Read_data_2_exp[0] = Read_data_2_expected_prev[0];
	end
	if (
		( Read_data_2_expected_prev[1] !== 1'bx ) && ( Read_data_2_prev[1] !== Read_data_2_expected_prev[1] )
		&& ((Read_data_2_expected_prev[1] !== last_Read_data_2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_2_expected_prev);
		$display ("     Real value = %b", Read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Read_data_2_exp[1] = Read_data_2_expected_prev[1];
	end
	if (
		( Read_data_2_expected_prev[2] !== 1'bx ) && ( Read_data_2_prev[2] !== Read_data_2_expected_prev[2] )
		&& ((Read_data_2_expected_prev[2] !== last_Read_data_2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_2_expected_prev);
		$display ("     Real value = %b", Read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Read_data_2_exp[2] = Read_data_2_expected_prev[2];
	end
	if (
		( Read_data_2_expected_prev[3] !== 1'bx ) && ( Read_data_2_prev[3] !== Read_data_2_expected_prev[3] )
		&& ((Read_data_2_expected_prev[3] !== last_Read_data_2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_2_expected_prev);
		$display ("     Real value = %b", Read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Read_data_2_exp[3] = Read_data_2_expected_prev[3];
	end
	if (
		( Read_data_2_expected_prev[4] !== 1'bx ) && ( Read_data_2_prev[4] !== Read_data_2_expected_prev[4] )
		&& ((Read_data_2_expected_prev[4] !== last_Read_data_2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_2_expected_prev);
		$display ("     Real value = %b", Read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Read_data_2_exp[4] = Read_data_2_expected_prev[4];
	end
	if (
		( Read_data_2_expected_prev[5] !== 1'bx ) && ( Read_data_2_prev[5] !== Read_data_2_expected_prev[5] )
		&& ((Read_data_2_expected_prev[5] !== last_Read_data_2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_2_expected_prev);
		$display ("     Real value = %b", Read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Read_data_2_exp[5] = Read_data_2_expected_prev[5];
	end
	if (
		( Read_data_2_expected_prev[6] !== 1'bx ) && ( Read_data_2_prev[6] !== Read_data_2_expected_prev[6] )
		&& ((Read_data_2_expected_prev[6] !== last_Read_data_2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_2_expected_prev);
		$display ("     Real value = %b", Read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Read_data_2_exp[6] = Read_data_2_expected_prev[6];
	end
	if (
		( Read_data_2_expected_prev[7] !== 1'bx ) && ( Read_data_2_prev[7] !== Read_data_2_expected_prev[7] )
		&& ((Read_data_2_expected_prev[7] !== last_Read_data_2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_data_2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_data_2_expected_prev);
		$display ("     Real value = %b", Read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Read_data_2_exp[7] = Read_data_2_expected_prev[7];
	end
	if (
		( Resultat_ALU_expected_prev[0] !== 1'bx ) && ( Resultat_ALU_prev[0] !== Resultat_ALU_expected_prev[0] )
		&& ((Resultat_ALU_expected_prev[0] !== last_Resultat_ALU_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultat_ALU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultat_ALU_expected_prev);
		$display ("     Real value = %b", Resultat_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Resultat_ALU_exp[0] = Resultat_ALU_expected_prev[0];
	end
	if (
		( Resultat_ALU_expected_prev[1] !== 1'bx ) && ( Resultat_ALU_prev[1] !== Resultat_ALU_expected_prev[1] )
		&& ((Resultat_ALU_expected_prev[1] !== last_Resultat_ALU_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultat_ALU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultat_ALU_expected_prev);
		$display ("     Real value = %b", Resultat_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Resultat_ALU_exp[1] = Resultat_ALU_expected_prev[1];
	end
	if (
		( Resultat_ALU_expected_prev[2] !== 1'bx ) && ( Resultat_ALU_prev[2] !== Resultat_ALU_expected_prev[2] )
		&& ((Resultat_ALU_expected_prev[2] !== last_Resultat_ALU_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultat_ALU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultat_ALU_expected_prev);
		$display ("     Real value = %b", Resultat_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Resultat_ALU_exp[2] = Resultat_ALU_expected_prev[2];
	end
	if (
		( Resultat_ALU_expected_prev[3] !== 1'bx ) && ( Resultat_ALU_prev[3] !== Resultat_ALU_expected_prev[3] )
		&& ((Resultat_ALU_expected_prev[3] !== last_Resultat_ALU_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultat_ALU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultat_ALU_expected_prev);
		$display ("     Real value = %b", Resultat_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Resultat_ALU_exp[3] = Resultat_ALU_expected_prev[3];
	end
	if (
		( Resultat_ALU_expected_prev[4] !== 1'bx ) && ( Resultat_ALU_prev[4] !== Resultat_ALU_expected_prev[4] )
		&& ((Resultat_ALU_expected_prev[4] !== last_Resultat_ALU_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultat_ALU[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultat_ALU_expected_prev);
		$display ("     Real value = %b", Resultat_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Resultat_ALU_exp[4] = Resultat_ALU_expected_prev[4];
	end
	if (
		( Resultat_ALU_expected_prev[5] !== 1'bx ) && ( Resultat_ALU_prev[5] !== Resultat_ALU_expected_prev[5] )
		&& ((Resultat_ALU_expected_prev[5] !== last_Resultat_ALU_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultat_ALU[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultat_ALU_expected_prev);
		$display ("     Real value = %b", Resultat_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Resultat_ALU_exp[5] = Resultat_ALU_expected_prev[5];
	end
	if (
		( Resultat_ALU_expected_prev[6] !== 1'bx ) && ( Resultat_ALU_prev[6] !== Resultat_ALU_expected_prev[6] )
		&& ((Resultat_ALU_expected_prev[6] !== last_Resultat_ALU_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultat_ALU[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultat_ALU_expected_prev);
		$display ("     Real value = %b", Resultat_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Resultat_ALU_exp[6] = Resultat_ALU_expected_prev[6];
	end
	if (
		( Resultat_ALU_expected_prev[7] !== 1'bx ) && ( Resultat_ALU_prev[7] !== Resultat_ALU_expected_prev[7] )
		&& ((Resultat_ALU_expected_prev[7] !== last_Resultat_ALU_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultat_ALU[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultat_ALU_expected_prev);
		$display ("     Real value = %b", Resultat_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Resultat_ALU_exp[7] = Resultat_ALU_expected_prev[7];
	end
	if (
		( write_data_expected_prev[0] !== 1'bx ) && ( write_data_prev[0] !== write_data_expected_prev[0] )
		&& ((write_data_expected_prev[0] !== last_write_data_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_write_data_exp[0] = write_data_expected_prev[0];
	end
	if (
		( write_data_expected_prev[1] !== 1'bx ) && ( write_data_prev[1] !== write_data_expected_prev[1] )
		&& ((write_data_expected_prev[1] !== last_write_data_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_write_data_exp[1] = write_data_expected_prev[1];
	end
	if (
		( write_data_expected_prev[2] !== 1'bx ) && ( write_data_prev[2] !== write_data_expected_prev[2] )
		&& ((write_data_expected_prev[2] !== last_write_data_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_write_data_exp[2] = write_data_expected_prev[2];
	end
	if (
		( write_data_expected_prev[3] !== 1'bx ) && ( write_data_prev[3] !== write_data_expected_prev[3] )
		&& ((write_data_expected_prev[3] !== last_write_data_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_write_data_exp[3] = write_data_expected_prev[3];
	end
	if (
		( write_data_expected_prev[4] !== 1'bx ) && ( write_data_prev[4] !== write_data_expected_prev[4] )
		&& ((write_data_expected_prev[4] !== last_write_data_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_write_data_exp[4] = write_data_expected_prev[4];
	end
	if (
		( write_data_expected_prev[5] !== 1'bx ) && ( write_data_prev[5] !== write_data_expected_prev[5] )
		&& ((write_data_expected_prev[5] !== last_write_data_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_write_data_exp[5] = write_data_expected_prev[5];
	end
	if (
		( write_data_expected_prev[6] !== 1'bx ) && ( write_data_prev[6] !== write_data_expected_prev[6] )
		&& ((write_data_expected_prev[6] !== last_write_data_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_write_data_exp[6] = write_data_expected_prev[6];
	end
	if (
		( write_data_expected_prev[7] !== 1'bx ) && ( write_data_prev[7] !== write_data_expected_prev[7] )
		&& ((write_data_expected_prev[7] !== last_write_data_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_write_data_exp[7] = write_data_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#6000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Diagram_test_sans_PC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [31:0] Instruction;
reg ResetBar;
// wires                                               
wire [7:0] data_memory;
wire [7:0] Read_data_1;
wire [7:0] Read_data_2;
wire [7:0] Resultat_ALU;
wire [7:0] write_data;

wire sampler;                             

// assign statements (if any)                          
Diagram_test_sans_PC i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.data_memory(data_memory),
	.Instruction(Instruction),
	.Read_data_1(Read_data_1),
	.Read_data_2(Read_data_2),
	.ResetBar(ResetBar),
	.Resultat_ALU(Resultat_ALU),
	.write_data(write_data)
);

// Clock
always
begin
	Clock = 1'b0;
	Clock = #200000 1'b1;
	#200000;
end 

// ResetBar
initial
begin
	ResetBar = 1'b0;
	ResetBar = #480000 1'b1;
end 
// Instruction[ 31 ]
initial
begin
	Instruction[31] = 1'b0;
	Instruction[31] = #600000 1'b1;
	Instruction[31] = #200000 1'b0;
	Instruction[31] = #160000 1'b1;
	Instruction[31] = #240000 1'b0;
end 
// Instruction[ 30 ]
initial
begin
	Instruction[30] = 1'b0;
end 
// Instruction[ 29 ]
initial
begin
	Instruction[29] = 1'b0;
end 
// Instruction[ 28 ]
initial
begin
	Instruction[28] = 1'b0;
end 
// Instruction[ 27 ]
initial
begin
	Instruction[27] = 1'b0;
	Instruction[27] = #600000 1'b1;
	Instruction[27] = #200000 1'b0;
	Instruction[27] = #160000 1'b1;
	Instruction[27] = #240000 1'b0;
end 
// Instruction[ 26 ]
initial
begin
	Instruction[26] = 1'b0;
	Instruction[26] = #600000 1'b1;
	Instruction[26] = #200000 1'b0;
	Instruction[26] = #160000 1'b1;
	Instruction[26] = #240000 1'b0;
end 
// Instruction[ 25 ]
initial
begin
	Instruction[25] = 1'b0;
end 
// Instruction[ 24 ]
initial
begin
	Instruction[24] = 1'b0;
end 
// Instruction[ 23 ]
initial
begin
	Instruction[23] = 1'b0;
end 
// Instruction[ 22 ]
initial
begin
	Instruction[22] = 1'b0;
	Instruction[22] = #1440000 1'b1;
	Instruction[22] = #200000 1'b0;
end 
// Instruction[ 21 ]
initial
begin
	Instruction[21] = 1'b0;
end 
// Instruction[ 20 ]
initial
begin
	Instruction[20] = 1'b0;
end 
// Instruction[ 19 ]
initial
begin
	Instruction[19] = 1'b0;
end 
// Instruction[ 18 ]
initial
begin
	Instruction[18] = 1'b0;
end 
// Instruction[ 17 ]
initial
begin
	Instruction[17] = 1'b0;
	Instruction[17] = #600000 1'b1;
	Instruction[17] = #200000 1'b0;
	Instruction[17] = #160000 1'b1;
	Instruction[17] = #240000 1'b0;
	Instruction[17] = #240000 1'b1;
	Instruction[17] = #200000 1'b0;
end 
// Instruction[ 16 ]
initial
begin
	Instruction[16] = 1'b0;
	Instruction[16] = #960000 1'b1;
	Instruction[16] = #240000 1'b0;
	Instruction[16] = #240000 1'b1;
	Instruction[16] = #200000 1'b0;
end 
// Instruction[ 15 ]
initial
begin
	Instruction[15] = 1'b0;
end 
// Instruction[ 14 ]
initial
begin
	Instruction[14] = 1'b0;
end 
// Instruction[ 13 ]
initial
begin
	Instruction[13] = 1'b0;
end 
// Instruction[ 12 ]
initial
begin
	Instruction[12] = 1'b0;
end 
// Instruction[ 11 ]
initial
begin
	Instruction[11] = 1'b0;
	Instruction[11] = #1440000 1'b1;
	Instruction[11] = #200000 1'b0;
end 
// Instruction[ 10 ]
initial
begin
	Instruction[10] = 1'b0;
end 
// Instruction[ 9 ]
initial
begin
	Instruction[9] = 1'b0;
end 
// Instruction[ 8 ]
initial
begin
	Instruction[8] = 1'b0;
end 
// Instruction[ 7 ]
initial
begin
	Instruction[7] = 1'b0;
end 
// Instruction[ 6 ]
initial
begin
	Instruction[6] = 1'b0;
end 
// Instruction[ 5 ]
initial
begin
	Instruction[5] = 1'b0;
end 
// Instruction[ 4 ]
initial
begin
	Instruction[4] = 1'b0;
end 
// Instruction[ 3 ]
initial
begin
	Instruction[3] = 1'b0;
end 
// Instruction[ 2 ]
initial
begin
	Instruction[2] = 1'b0;
end 
// Instruction[ 1 ]
initial
begin
	Instruction[1] = 1'b0;
end 
// Instruction[ 0 ]
initial
begin
	Instruction[0] = 1'b0;
	Instruction[0] = #960000 1'b1;
	Instruction[0] = #240000 1'b0;
end 

Diagram_test_sans_PC_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.Instruction(Instruction),
	.ResetBar(ResetBar),
	.sampler_tx(sampler)
);

Diagram_test_sans_PC_vlg_check_tst tb_out(
	.data_memory(data_memory),
	.Read_data_1(Read_data_1),
	.Read_data_2(Read_data_2),
	.Resultat_ALU(Resultat_ALU),
	.write_data(write_data),
	.sampler_rx(sampler)
);
endmodule

