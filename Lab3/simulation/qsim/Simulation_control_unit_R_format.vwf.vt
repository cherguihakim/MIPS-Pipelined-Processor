// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/07/2024 17:18:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CONTROL_UNIT
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CONTROL_UNIT_vlg_sample_tst(
	opcode,
	sampler_tx
);
input [5:0] opcode;
output sampler_tx;

reg sample;
time current_time;
always @(opcode)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CONTROL_UNIT_vlg_check_tst (
	AluOp0,
	AluOp1,
	ALUSRC,
	Branch,
	Jump,
	MemRead,
	MemtoReg,
	MemWrite,
	RegDst,
	RegWrite,
	sampler_rx
);
input  AluOp0;
input  AluOp1;
input  ALUSRC;
input  Branch;
input  Jump;
input  MemRead;
input  MemtoReg;
input  MemWrite;
input  RegDst;
input  RegWrite;
input sampler_rx;

reg  AluOp0_expected;
reg  AluOp1_expected;
reg  ALUSRC_expected;
reg  Branch_expected;
reg  Jump_expected;
reg  MemRead_expected;
reg  MemtoReg_expected;
reg  MemWrite_expected;
reg  RegDst_expected;
reg  RegWrite_expected;

reg  AluOp0_prev;
reg  AluOp1_prev;
reg  ALUSRC_prev;
reg  Branch_prev;
reg  Jump_prev;
reg  MemRead_prev;
reg  MemtoReg_prev;
reg  MemWrite_prev;
reg  RegDst_prev;
reg  RegWrite_prev;

reg  AluOp0_expected_prev;
reg  AluOp1_expected_prev;
reg  ALUSRC_expected_prev;
reg  Branch_expected_prev;
reg  Jump_expected_prev;
reg  MemRead_expected_prev;
reg  MemtoReg_expected_prev;
reg  MemWrite_expected_prev;
reg  RegDst_expected_prev;
reg  RegWrite_expected_prev;

reg  last_AluOp0_exp;
reg  last_AluOp1_exp;
reg  last_ALUSRC_exp;
reg  last_Branch_exp;
reg  last_Jump_exp;
reg  last_MemRead_exp;
reg  last_MemtoReg_exp;
reg  last_MemWrite_exp;
reg  last_RegDst_exp;
reg  last_RegWrite_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	AluOp0_prev = AluOp0;
	AluOp1_prev = AluOp1;
	ALUSRC_prev = ALUSRC;
	Branch_prev = Branch;
	Jump_prev = Jump;
	MemRead_prev = MemRead;
	MemtoReg_prev = MemtoReg;
	MemWrite_prev = MemWrite;
	RegDst_prev = RegDst;
	RegWrite_prev = RegWrite;
end

// update expected /o prevs

always @(trigger)
begin
	AluOp0_expected_prev = AluOp0_expected;
	AluOp1_expected_prev = AluOp1_expected;
	ALUSRC_expected_prev = ALUSRC_expected;
	Branch_expected_prev = Branch_expected;
	Jump_expected_prev = Jump_expected;
	MemRead_expected_prev = MemRead_expected;
	MemtoReg_expected_prev = MemtoReg_expected;
	MemWrite_expected_prev = MemWrite_expected;
	RegDst_expected_prev = RegDst_expected;
	RegWrite_expected_prev = RegWrite_expected;
end



// expected AluOp0
initial
begin
	AluOp0_expected = 1'bX;
end 

// expected AluOp1
initial
begin
	AluOp1_expected = 1'bX;
end 

// expected ALUSRC
initial
begin
	ALUSRC_expected = 1'bX;
end 

// expected Branch
initial
begin
	Branch_expected = 1'bX;
end 

// expected Jump
initial
begin
	Jump_expected = 1'bX;
end 

// expected MemRead
initial
begin
	MemRead_expected = 1'bX;
end 

// expected MemtoReg
initial
begin
	MemtoReg_expected = 1'bX;
end 

// expected MemWrite
initial
begin
	MemWrite_expected = 1'bX;
end 

// expected RegDst
initial
begin
	RegDst_expected = 1'bX;
end 

// expected RegWrite
initial
begin
	RegWrite_expected = 1'bX;
end 
// generate trigger
always @(AluOp0_expected or AluOp0 or AluOp1_expected or AluOp1 or ALUSRC_expected or ALUSRC or Branch_expected or Branch or Jump_expected or Jump or MemRead_expected or MemRead or MemtoReg_expected or MemtoReg or MemWrite_expected or MemWrite or RegDst_expected or RegDst or RegWrite_expected or RegWrite)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AluOp0 = %b | expected AluOp1 = %b | expected ALUSRC = %b | expected Branch = %b | expected Jump = %b | expected MemRead = %b | expected MemtoReg = %b | expected MemWrite = %b | expected RegDst = %b | expected RegWrite = %b | ",AluOp0_expected_prev,AluOp1_expected_prev,ALUSRC_expected_prev,Branch_expected_prev,Jump_expected_prev,MemRead_expected_prev,MemtoReg_expected_prev,MemWrite_expected_prev,RegDst_expected_prev,RegWrite_expected_prev);
	$display("| real AluOp0 = %b | real AluOp1 = %b | real ALUSRC = %b | real Branch = %b | real Jump = %b | real MemRead = %b | real MemtoReg = %b | real MemWrite = %b | real RegDst = %b | real RegWrite = %b | ",AluOp0_prev,AluOp1_prev,ALUSRC_prev,Branch_prev,Jump_prev,MemRead_prev,MemtoReg_prev,MemWrite_prev,RegDst_prev,RegWrite_prev);
`endif
	if (
		( AluOp0_expected_prev !== 1'bx ) && ( AluOp0_prev !== AluOp0_expected_prev )
		&& ((AluOp0_expected_prev !== last_AluOp0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AluOp0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AluOp0_expected_prev);
		$display ("     Real value = %b", AluOp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AluOp0_exp = AluOp0_expected_prev;
	end
	if (
		( AluOp1_expected_prev !== 1'bx ) && ( AluOp1_prev !== AluOp1_expected_prev )
		&& ((AluOp1_expected_prev !== last_AluOp1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AluOp1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AluOp1_expected_prev);
		$display ("     Real value = %b", AluOp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AluOp1_exp = AluOp1_expected_prev;
	end
	if (
		( ALUSRC_expected_prev !== 1'bx ) && ( ALUSRC_prev !== ALUSRC_expected_prev )
		&& ((ALUSRC_expected_prev !== last_ALUSRC_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSRC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSRC_expected_prev);
		$display ("     Real value = %b", ALUSRC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUSRC_exp = ALUSRC_expected_prev;
	end
	if (
		( Branch_expected_prev !== 1'bx ) && ( Branch_prev !== Branch_expected_prev )
		&& ((Branch_expected_prev !== last_Branch_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Branch :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Branch_expected_prev);
		$display ("     Real value = %b", Branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Branch_exp = Branch_expected_prev;
	end
	if (
		( Jump_expected_prev !== 1'bx ) && ( Jump_prev !== Jump_expected_prev )
		&& ((Jump_expected_prev !== last_Jump_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Jump :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Jump_expected_prev);
		$display ("     Real value = %b", Jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Jump_exp = Jump_expected_prev;
	end
	if (
		( MemRead_expected_prev !== 1'bx ) && ( MemRead_prev !== MemRead_expected_prev )
		&& ((MemRead_expected_prev !== last_MemRead_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemRead :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemRead_expected_prev);
		$display ("     Real value = %b", MemRead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MemRead_exp = MemRead_expected_prev;
	end
	if (
		( MemtoReg_expected_prev !== 1'bx ) && ( MemtoReg_prev !== MemtoReg_expected_prev )
		&& ((MemtoReg_expected_prev !== last_MemtoReg_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_expected_prev);
		$display ("     Real value = %b", MemtoReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemtoReg_exp = MemtoReg_expected_prev;
	end
	if (
		( MemWrite_expected_prev !== 1'bx ) && ( MemWrite_prev !== MemWrite_expected_prev )
		&& ((MemWrite_expected_prev !== last_MemWrite_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemWrite_expected_prev);
		$display ("     Real value = %b", MemWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MemWrite_exp = MemWrite_expected_prev;
	end
	if (
		( RegDst_expected_prev !== 1'bx ) && ( RegDst_prev !== RegDst_expected_prev )
		&& ((RegDst_expected_prev !== last_RegDst_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDst :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDst_expected_prev);
		$display ("     Real value = %b", RegDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RegDst_exp = RegDst_expected_prev;
	end
	if (
		( RegWrite_expected_prev !== 1'bx ) && ( RegWrite_prev !== RegWrite_expected_prev )
		&& ((RegWrite_expected_prev !== last_RegWrite_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegWrite_expected_prev);
		$display ("     Real value = %b", RegWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RegWrite_exp = RegWrite_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CONTROL_UNIT_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] opcode;
// wires                                               
wire AluOp0;
wire AluOp1;
wire ALUSRC;
wire Branch;
wire Jump;
wire MemRead;
wire MemtoReg;
wire MemWrite;
wire RegDst;
wire RegWrite;

wire sampler;                             

// assign statements (if any)                          
CONTROL_UNIT i1 (
// port map - connection between master ports and signals/registers   
	.AluOp0(AluOp0),
	.AluOp1(AluOp1),
	.ALUSRC(ALUSRC),
	.Branch(Branch),
	.Jump(Jump),
	.MemRead(MemRead),
	.MemtoReg(MemtoReg),
	.MemWrite(MemWrite),
	.opcode(opcode),
	.RegDst(RegDst),
	.RegWrite(RegWrite)
);
// opcode[ 5 ]
initial
begin
	opcode[5] = 1'b0;
end 
// opcode[ 4 ]
initial
begin
	opcode[4] = 1'b0;
end 
// opcode[ 3 ]
initial
begin
	opcode[3] = 1'b0;
end 
// opcode[ 2 ]
initial
begin
	opcode[2] = 1'b0;
end 
// opcode[ 1 ]
initial
begin
	opcode[1] = 1'b1;
end 
// opcode[ 0 ]
initial
begin
	opcode[0] = 1'b0;
end 

CONTROL_UNIT_vlg_sample_tst tb_sample (
	.opcode(opcode),
	.sampler_tx(sampler)
);

CONTROL_UNIT_vlg_check_tst tb_out(
	.AluOp0(AluOp0),
	.AluOp1(AluOp1),
	.ALUSRC(ALUSRC),
	.Branch(Branch),
	.Jump(Jump),
	.MemRead(MemRead),
	.MemtoReg(MemtoReg),
	.MemWrite(MemWrite),
	.RegDst(RegDst),
	.RegWrite(RegWrite),
	.sampler_rx(sampler)
);
endmodule

